#+TITLE: Module2

* Functions - Week 1
A set of instructions with a name

** Example
*** Directly
#+begin_src go
package main

import ("fmt")

func main () {
	fmt.Printf("Hello, world.")
}
#+end_src

#+RESULTS:
: Hello, world.

*** With a helper function
#+begin_src go
package main

import ("fmt")

func PrintHello () {
	fmt.Println("Hello, world!")
}

func main () {
	PrintHello()
}
#+end_src

#+RESULTS:
: Hello, world!
** Re-usability
If a pattern happens frequently, then to capture it's structure in a function
can be useful. So that, every time this pattern arises, you can call the
function to match it.
** Hidden abstractions
- Details are hidden in the function.
- Only need to understand the I/O (operations).
- Improves understandability.

*** Example
See the following pseudo-code.
#+begin_src go
func FindPupil () {
	GrabImage ()
	FilterImage ()
	FindEllipses ()
}
#+end_src

** Parameters and Arguments
- =x= and =y= are parameters;
- =2= and =3= are arguments.

parameters: variables in the design of the function.
arguments: variables-value in the call of the function.

#+begin_src go
package main

import ("fmt")

func foo(x int, y int){
	fmt.Println(x*y)
}

func main(){
	foo(2,3)
}
#+end_src

#+RESULTS:
: 6
*** Short hands
both parameters have the same type =int=.
#+begin_src go
func foo(x, y int){
	fmt.Println(x*y)
}
#+end_src
** Return values

#+begin_src go
package main

import ("fmt")

func foo(x, y int) int{
	return x*y
}

func main(){
	y := foo(3,4)
	fmt.Println(y)
}
#+end_src

#+RESULTS:
: 12

#+begin_src go
package main

import ("fmt")

func foo(x, y int) (int, int){
	return x*y, 2*x*y
}

func main(){
	y, y2 := foo(3,4)
	fmt.Println(y,y2)
}
#+end_src

#+RESULTS:
: 12 24
** Call by value
Other name for how environmental encapsulation happens.

#+begin_src go
package main

import ("fmt")

func foo(x, y int) (int, int){
	return x*y, 2*x*y
}

func main(){
	x := 3
	y := 4
	w, z := foo(x,y)
	fmt.Println("x:",x,"y:",y,"w:",w,"z:",z)
}
#+end_src

#+RESULTS:
: x: 3 y: 4 w: 12 z: 24

Note the value of =x= and =y= does not go through changes when we call
=foo(x,y)=, because only the environmental variables - e.i., it's copies - are
being used to perfom tasks.

** Call by Reference
To "burlate" environmental encapsulation for performance, we can use pointers.

#+begin_src go
package main

import ("fmt")

func foo(x *int, y *int){
	,*x = (*x)*(*y)
	,*y = 2*(*x)
}

func main(){
	x:=3
	y:=4
	foo(&x,&y)
	fmt.Println("x:",x,"y:",y)
}
#+end_src

#+RESULTS:
: x: 12 y: 24
