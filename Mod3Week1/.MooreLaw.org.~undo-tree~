(undo-tree-save-format-version . 1)
"401b63936d35e8e4e39bd24d20d55fc34fba779a"
[nil nil nil nil (25196 10423 170421 807000) 0 nil]
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -629) (undo-tree-id104 . -1) 630 (t 25196 5298 460974 117000)) nil (25196 10423 170420 453000) 0 nil])
([nil nil ((629 . 630)) nil (25196 10423 170418 144000) 0 nil])
([nil nil ((629 . 650) (t 25196 9827 121833 51000)) nil (25196 10423 170417 273000) 0 nil])
([nil nil ((650 . 664)) nil (25196 10423 170416 186000) 0 nil])
([nil nil ((664 . 685)) nil (25196 10423 170415 362000) 0 nil])
([nil nil ((685 . 701)) nil (25196 10423 170414 438000) 0 nil])
([nil nil ((748 . 750)) nil (25196 10423 170413 540000) 0 nil])
([nil nil ((653 . 662) (#("somethimes" 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 653)) nil (25196 10423 170412 592000) 0 nil])
([nil nil ((663 . 671) (#("refered" 0 7 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 663)) nil (25196 10423 170411 457000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 749) 664) nil (25196 10423 170410 407000) 0 nil])
([nil nil ((749 . 750) (t 25196 9873 228502 282000)) nil (25196 10423 170409 174000) 0 nil])
([nil nil ((750 . 751)) nil (25196 10423 170408 192000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -750) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 751) nil (25196 10423 170406 875000) 0 nil])
([nil nil ((750 . 751)) nil (25196 10423 170404 167000) 0 nil])
([nil nil ((751 . 753)) nil (25196 10423 170403 366000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -751) (undo-tree-id100 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -752) (undo-tree-id101 . -1) 753) nil (25196 10423 170402 169000) 0 nil])
([nil nil ((751 . 762)) nil (25196 10423 170399 638000) 0 nil])
([nil nil ((762 . 763)) nil (25196 10423 170398 763000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -762) (undo-tree-id99 . -1) 763) nil (25196 10423 170397 704000) 0 nil])
([nil nil ((762 . 783)) nil (25196 10423 170395 884000) 0 nil])
([nil nil ((766 . 774)) nil (25196 10423 170395 43000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -772) (undo-tree-id97 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -773) (undo-tree-id98 . -1) 774) nil (25196 10423 170393 730000) 0 nil])
([nil nil ((772 . 775)) nil (25196 10423 170362 90000) 0 nil])
([nil nil ((792 . 793)) nil (25196 10423 170361 283000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -792) (undo-tree-id96 . -1) 793) nil (25196 10423 170360 258000) 0 nil])
([nil nil ((792 . 793)) nil (25196 10423 170358 419000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -792) (undo-tree-id95 . -1) 793) nil (25196 10423 170357 171000) 0 nil])
([nil nil ((792 . 797)) nil (25196 10423 170355 508000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -796) (undo-tree-id94 . -1) 797) nil (25196 10423 170354 454000) 0 nil])
([nil nil ((796 . 802)) nil (25196 10423 170352 988000) 0 nil])
([nil nil ((802 . 814)) nil (25196 10423 170352 47000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -810) (undo-tree-id90 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -811) (undo-tree-id91 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -812) (undo-tree-id92 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -813) (undo-tree-id93 . -1) 814) nil (25196 10423 170350 791000) 0 nil])
([nil nil ((810 . 823)) nil (25196 10423 170346 587000) 0 nil])
([nil nil ((823 . 835)) nil (25196 10423 170345 782000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -834) (undo-tree-id89 . -1) 835) nil (25196 10423 170344 788000) 0 nil])
([nil nil ((834 . 849)) nil (25196 10423 170343 189000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -846) (undo-tree-id86 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -847) (undo-tree-id87 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -848) (undo-tree-id88 . -1) 849) nil (25196 10423 170341 699000) 0 nil])
([nil nil ((846 . 856)) nil (25196 10423 170338 572000) 0 nil])
([nil nil ((856 . 858)) nil (25196 10423 170337 687000) 0 nil])
([nil nil ((858 . 860)) nil (25196 10423 170336 859000) 0 nil])
([nil nil ((860 . 881)) nil (25196 10423 170336 79000) 0 nil])
([nil nil ((881 . 895)) nil (25196 10423 170335 204000) 0 nil])
([nil nil ((895 . 903)) nil (25196 10423 170334 174000) 0 nil])
([nil nil ((903 . 921)) nil (25196 10423 170333 297000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -920) (undo-tree-id85 . -1) 921) nil (25196 10423 170332 265000) 0 nil])
([nil nil ((#("\\(\\begin{array}{l}R= \\frac{\\rho L}{A}\\end{array} \\)
" 0 52 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 922) (undo-tree-id84 . -52)) nil (25196 10423 170330 505000) 0 nil])
([nil nil ((858 . 859)) nil (25196 10423 170329 42000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -858) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 859) nil (25196 10423 170328 78000) 0 nil])
([nil nil ((858 . 871)) nil (25196 10423 170326 36000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg)) . 823) (822 . 823) (871 . 872)) nil (25196 10423 170324 977000) 0 nil])
([nil nil ((871 . 873)) nil (25196 10423 170323 792000) 0 nil])
([nil nil ((873 . 894)) nil (25196 10423 170322 917000) 0 nil])
([nil nil ((894 . 895)) nil (25196 10423 170322 177000) 0 nil])
([nil nil ((895 . 897)) nil (25196 10423 170321 359000) 0 nil])
([nil nil ((nil rear-nonsticky nil 897 . 898) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -949) (897 . 950)) nil (25196 10423 170320 308000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 896) (undo-tree-id81 . -1)) nil (25196 10423 170319 130000) 0 nil])
([nil nil ((1011 . 1032)) nil (25196 10423 170317 634000) 0 nil])
([nil nil ((1033 . 1043) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg)) . 1030) (1029 . 1030) (1032 . 1033)) nil (25196 10423 170316 720000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1033) (undo-tree-id71 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1034) (undo-tree-id72 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1035) (undo-tree-id73 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1036) (undo-tree-id74 . -1) (#("q" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1037) (undo-tree-id75 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1038) (undo-tree-id76 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1039) (undo-tree-id77 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1040) (undo-tree-id78 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1041) (undo-tree-id79 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1042) (undo-tree-id80 . -1) 1043) nil (25196 10423 170313 999000) 0 nil])
([nil nil ((1050 . 1054) (1049 . 1051) (#("(" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1049) (1033 . 1050)) nil (25196 10423 170304 703000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1052) (undo-tree-id69 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1053) (undo-tree-id70 . -1) 1054) nil (25196 10423 170302 934000) 0 nil])
([nil nil ((1052 . 1059)) nil (25196 10423 170300 690000) 0 nil])
([nil nil ((1060 . 1061)) nil (25196 10423 170299 871000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1062) (1063 . 1063) 1060) nil (25196 10423 170298 827000) 0 nil])
([nil nil ((1050 . 1058) (#("quantized" 0 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1050) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (t 25196 10087 438514 184000)) nil (25196 10423 170297 530000) 0 nil])
([nil nil ((1058 . 1059)) nil (25196 10423 170294 686000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . 1026) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . 1026) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1026) (t 25196 10093 31847 832000)) nil (25196 10423 170293 413000) 0 nil])
([nil nil ((1025 . 1033)) nil (25196 10423 170292 101000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg)) . 1026) (1025 . 1026) (1033 . 1034) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1033) (undo-tree-id65 . 1) (undo-tree-id66 . -1) 1034) nil (25196 10423 170290 833000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1033) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . -1034) (undo-tree-id63 . 1) (undo-tree-id64 . -1) 1035) nil (25196 10423 170285 317000) 0 nil])
([nil nil ((1033 . 1034)) nil (25196 10423 170204 13000) 0 nil])
([nil nil ((1065 . 1067)) nil (25196 10423 170203 277000) 0 nil])
([nil nil ((1067 . 1069)) nil (25196 10423 170202 422000) 0 nil])
([nil nil ((apply yas--snippet-revive 1067 1094 #s(yas--snippet nil nil #s(yas--exit 1081 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1081 nil) 1 nil nil nil nil)) (1067 . 1094) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 1067) (undo-tree-id60 . -2) 1069) nil (25196 10423 170201 464000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 950)) nil (25196 10423 170199 131000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . 1093) (1094 . 1094) 950) nil (25196 10423 170198 374000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1605 . 1606) (nil fontified nil 1319 . 1606) (nil fontified nil 1318 . 1319) (nil fontified nil 1080 . 1318) (1080 . 1606) (t 25196 10121 715182 749000)) nil (25196 10423 170196 862000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . 1605)) nil (25196 10423 170194 842000) 0 nil])
([nil nil ((1617 . 1618) (t 25196 10179 118519 293000)) nil (25196 10423 170194 54000) 0 nil])
([nil nil ((1618 . 1620)) nil (25196 10423 170192 829000) 0 nil])
([nil nil ((1620 . 1707)) nil (25196 10423 170191 970000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 617) (t 25196 10207 158520 865000)) nil (25196 10423 170191 75000) 0 nil])
([nil nil ((1707 . 1710)) nil (25196 10423 170190 196000) 0 nil])
([nil nil ((1710 . 1711)) nil (25196 10423 170189 449000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -1710) (undo-tree-id59 . -1) 1711) nil (25196 10423 170188 321000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -1708) (undo-tree-id57 . -2) (undo-tree-id58 . -2) 1710) nil (25196 10423 170186 613000) 0 nil])
([nil nil ((1708 . 1714)) nil (25196 10423 170184 232000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1711) (undo-tree-id54 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1712) (undo-tree-id55 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1713) (undo-tree-id56 . -1) 1714) nil (25196 10423 170183 197000) 0 nil])
([nil nil ((1711 . 1722)) nil (25196 10423 170180 13000) 0 nil])
([nil nil ((1722 . 1727)) nil (25196 10423 170179 250000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1726) (undo-tree-id53 . -1) 1727) nil (25196 10423 170178 322000) 0 nil])
([nil nil ((1726 . 1737)) nil (25196 10423 170176 884000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1733) (undo-tree-id49 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1734) (undo-tree-id50 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1735) (undo-tree-id51 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1736) (undo-tree-id52 . -1) 1737) nil (25196 10423 170175 383000) 0 nil])
([nil nil ((1733 . 1743)) nil (25196 10423 170171 671000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1741) (undo-tree-id47 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1742) (undo-tree-id48 . -1) 1743) nil (25196 10423 170170 486000) 0 nil])
([nil nil ((1741 . 1744)) nil (25196 10423 170167 581000) 0 nil])
([nil nil ((1744 . 1762)) nil (25196 10423 170166 903000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1761) (undo-tree-id46 . -1) 1762) nil (25196 10423 170166 16000) 0 nil])
([nil nil ((1761 . 1773)) nil (25196 10423 170164 408000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1771) (undo-tree-id44 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1772) (undo-tree-id45 . -1) 1773) nil (25196 10423 170163 212000) 0 nil])
([nil nil ((1771 . 1792)) nil (25196 10423 170160 466000) 0 nil])
([nil nil ((1794 . 1799) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg)) . 1785) (1784 . 1785) (1792 . 1794)) nil (25196 10423 170159 305000) 0 nil])
([nil nil ((1708 . 1713)) nil (25196 10423 170158 153000) 0 nil])
([nil nil ((1713 . 1719)) nil (25196 10423 170157 399000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1719) (undo-tree-id43 . -1) 1720) nil (25196 10423 170156 326000) 0 nil])
([nil nil ((1719 . 1720)) nil (25196 10423 170154 639000) 0 nil])
([nil nil ((1810 . 1811) 833) nil (25196 10423 170153 548000) 0 nil])
([nil nil ((1810 . 1813) 615 (t 25196 10259 101857 110000)) nil (25196 10423 170152 531000) 0 nil])
([nil nil ((1810 . 1811)) nil (25196 10423 170151 350000) 0 nil])
([nil nil ((#("- CPU power dissipation.
" 0 1 (fontified t face (org-list-dt) line-prefix "" wrap-prefix #("  " 0 2 (face org-indent))) 1 25 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)))) . 581) (undo-tree-id42 . -1) 582) nil (25196 10423 170150 301000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 1788) 581) nil (25196 10423 170148 645000) 0 nil])
([nil nil ((#("- Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified t face (org-list-dt) line-prefix "" wrap-prefix #("  " 0 2 (face org-indent))) 1 68 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)))) . 513) (undo-tree-id36 . -8) (undo-tree-id37 . -8) (undo-tree-id38 . -8) (undo-tree-id39 . -8) (undo-tree-id40 . -8) (undo-tree-id41 . -8) 521 (t 25196 10271 58524 448000)) nil (25196 10423 170147 230000) 0 nil])
([nil nil ((1720 . 1723) 514) nil (25196 10423 170142 446000) 0 nil])
([nil nil ((1723 . 1724) 1722) nil (25196 10423 170141 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1724 . 1725) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -1792) (1724 . 1793)) nil (25196 10423 170140 223000) 0 nil])
([nil nil ((1723 . 1734)) nil (25196 10423 170139 177000) 0 nil])
([nil nil ((#("*
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 1719)) nil (25196 10423 170138 20000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t)) . 1733) (undo-tree-id35 . -1)) nil (25196 10423 170137 57000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg delete)) . 1733) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg delete face (org-list-dt))) . 1733)) nil (25196 10423 170135 553000) 0 nil])
([nil nil ((523 . 525) (t 25196 10294 971859 124000)) nil (25196 10423 170134 607000) 0 nil])
([nil nil ((524 . 525)) nil (25196 10423 170133 455000) 0 nil])
([nil nil ((525 . 527)) nil (25196 10423 170132 651000) 0 nil])
([nil nil ((apply yas--snippet-revive 525 552 #s(yas--snippet nil nil #s(yas--exit #<marker at 592 in MooreLaw.org> nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 592 in MooreLaw.org> nil) 2 nil nil nil nil)) (525 . 552) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 525) (undo-tree-id34 . -2) 527) nil (25196 10423 170131 607000) 0 nil])
([nil nil ((nil rear-nonsticky nil 539 . 540) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -606) (539 . 607)) nil (25196 10423 170128 992000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg delete font-lock-fontified t font-lock-multiline t face org-quote)) . 540) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg font-lock-fontified t font-lock-multiline t face (org-quote org-list-dt))) . 540)) nil (25196 10423 170127 786000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . 539) (undo-tree-id33 . -1)) nil (25196 10423 170126 706000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 616) (t 25196 10311 451860 48000)) nil (25196 10423 170125 230000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 524)) nil (25196 10423 170124 291000) 0 nil])
([nil nil ((523 . 536) (t 25196 10315 751860 288000)) nil (25196 10423 170123 577000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -534) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -535) (undo-tree-id32 . -1) 536) nil (25196 10423 170122 521000) 0 nil])
([nil nil ((534 . 542)) nil (25196 10423 170120 391000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -538) (undo-tree-id27 . -1) (#("r" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -539) (undo-tree-id28 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -540) (undo-tree-id29 . -1) (#("i" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -541) (undo-tree-id30 . -1) 542) nil (25196 10423 170118 741000) 0 nil])
([nil nil ((538 . 551)) nil (25196 10423 170114 855000) 0 nil])
([nil nil ((#("drain leakage" 0 13 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 538)) nil (25196 10423 170114 73000) 0 nil])
([nil nil ((539 . 542) (nil ws-butler-chg delete 539 . 540) (538 . 539)) nil (25196 10423 170113 166000) 0 nil])
([nil nil ((#("-to-grai" 0 4 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 4 5 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 5 6 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 6 7 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 7 8 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 534) (undo-tree-id26 . -7)) nil (25196 10423 170112 42000) 0 nil])
([nil nil ((534 . 536)) nil (25196 10423 170110 749000) 0 nil])
([nil nil ((#(" and source0t" 0 11 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 11 12 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 12 13 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 523) (undo-tree-id25 . -12)) nil (25196 10423 170109 867000) 0 nil])
([nil nil ((524 . 525) (t 25196 10315 751860 288000)) nil (25196 10423 170108 567000) 0 nil])
([nil nil ((616 . 617)) nil (25196 10436 298691 964000) 0 nil])
([nil nil ((1811 . 1814) 514) nil (25196 10464 618762 555000) 0 nil] [nil nil ((539 . 540)) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . 539) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1)) (25196 10435 900162 676000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1814 . 1815) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -1882) (1814 . 1883) 1813) nil (25196 10464 618761 101000) 0 nil])
([nil nil ((nil ws-butler-chg delete 541 . 542) (540 . 541) (540 . 541)) ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote ws-butler-chg delete)) . 540) (#("-" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg font-lock-fontified t font-lock-multiline t face (org-quote org-list-dt))) . 540) (nil ws-butler-chg nil 541 . 542)) (25196 10435 517005 465000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -1815) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -1816) (undo-tree-id139 . -1) 1817) nil (25196 10464 618759 224000) 0 nil])
([nil nil ((#("
- Joule heating, or Ohmic heating, directly proportional to power.
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky nil font-lock-fontified t font-lock-multiline t face org-quote) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg font-lock-fontified t font-lock-multiline t face (org-quote org-list-dt)) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote) 4 67 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . 539) (undo-tree-id22 . -1) (undo-tree-id23 . -67) (undo-tree-id24 . -1) (606 . 607) (nil rear-nonsticky t 539 . 540)) ((nil rear-nonsticky nil 539 . 540) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . 606) (539 . 607)) (25196 10435 299683 31000) 0 nil])
([nil nil ((nil rear-nonsticky nil 361 . 362) (#("
" 0 1 (fontified nil line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -429) (361 . 430) 295) nil (25196 10464 618756 744000) 0 nil])
([nil nil ((525 . 527) (#("#+begin_quote

#+end_quote
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 1 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote) 15 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 26 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 525) (undo-tree-id18 . -14) (undo-tree-id19 . -14) (undo-tree-id20 . -15) (undo-tree-id21 . -14)) ((525 . 552) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 525)) (25196 10434 940032 227000) 0 nil])
([nil nil ((1881 . 1882) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 1881) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 1882) nil (25196 10464 618755 92000) 0 nil])
([nil nil ((#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 525) (undo-tree-id17 . -1)) ((525 . 527)) (25196 10434 295288 505000) 0 nil])
([nil nil ((1882 . 1884)) nil (25196 10464 618751 714000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 524) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1)) ((524 . 525)) (25196 10433 252178 550000) 0 nil])
([nil nil ((apply yas--snippet-revive 1882 1909 #s(yas--snippet nil nil #s(yas--exit 1896 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1896 nil) 3 nil nil nil nil)) (1882 . 1909) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 1882) (undo-tree-id135 . -2) 1884) nil (25196 10464 618750 384000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 523) (undo-tree-id8 . 2) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1)) ((523 . 525)) (25196 10432 265024 751000) 0 nil])
([nil nil ((#("Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete) 1 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . 1910)) nil (25196 10464 618747 669000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1734 . 1735) (1733 . 1734) (1733 . 1734)) ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg delete)) . 1733) (#("-" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg delete face (org-list-dt))) . 1733) (nil ws-butler-chg nil 1734 . 1735)) (25196 10431 584221 694000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1896 . 1897) (#("
" 0 1 (ws-butler-chg chg fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -1962) (1896 . 1963)) nil (25196 10464 618746 94000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1734 . 1735) (1733 . 1734)) ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t)) . 1733) (nil ws-butler-chg nil 1734 . 1735)) (25196 10430 270269 168000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . 1896) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (25196 10464 618743 999000) 0 nil])
([nil nil ((1719 . 1721)) ((#("*
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 1719)) (25196 10429 681272 67000) 0 nil])
([nil nil ((1881 . 1893)) nil (25196 10464 618729 891000) 0 nil])
([nil nil ((#("Voltage Gap" 0 11 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 1723)) ((1723 . 1734)) (25196 10429 20861 533000) 0 nil])
([nil nil ((1879 . 1880) (t 25196 10464 621868 636000)) nil (25196 10466 585627 15000) 0 nil])
([nil nil ((#("
- Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky nil) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face (org-list-dt)) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 4 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 68 69 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . 1724) (1792 . 1793) (nil rear-nonsticky t 1724 . 1725)) ((nil rear-nonsticky nil 1724 . 1725) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . 1792) (1724 . 1793)) (25196 10428 413456 77000) 0 nil])
([nil nil ((683 . 684) (t 25196 10466 591868 746000)) nil (25196 10493 669726 698000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 1723) (undo-tree-id7 . -1)) ((1723 . 1724)) (25196 10424 299068 312000) 0 nil])
([nil nil ((684 . 686)) nil (25196 10493 669725 587000) 0 nil])
([nil nil ((#("
* " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 1720) (undo-tree-id6 . -2)) ((1720 . 1723)) (25196 10424 100009 644000) 0 nil])
([nil nil ((apply yas--snippet-revive 684 711 #s(yas--snippet nil nil #s(yas--exit 698 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 698 nil) 4 nil nil nil nil)) (684 . 711) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 684) (undo-tree-id221 . -2) 686) nil (25196 10493 669724 474000) 0 nil])
([nil nil ((513 . 581)) ((#("- Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)) face (org-list-dt)) 1 68 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)))) . 513) (undo-tree-id105 . -8) (undo-tree-id106 . -8) (undo-tree-id107 . -8) (undo-tree-id108 . -8) (undo-tree-id109 . -8) (undo-tree-id110 . -8) (undo-tree-id111 . -8) (undo-tree-id112 . -8) (undo-tree-id113 . -8) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8)) (25196 10423 916051 943000) 0 nil])
([nil nil ((683 . 684)) nil (25196 10493 669721 919000) 0 nil])
([nil nil ((#("- Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)) face (org-list-dt)) 1 68 (fontified t line-prefix "" wrap-prefix #("  " 0 2 (face org-indent)))) . 513) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -8) (undo-tree-id3 . -8) (undo-tree-id4 . -8) (undo-tree-id5 . -8) 521) ((nil ws-butler-chg delete 581 . 582) (513 . 581)) (25196 10423 170075 333000) 0 nil])
([nil nil ((591 . 597)) nil (25196 10493 669721 88000) 0 nil])
nil
([nil nil ((#("T" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -596) (undo-tree-id220 . -1) 597) nil (25196 10493 669720 63000) 0 nil])
([nil nil ((596 . 609)) nil (25196 10493 669718 319000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -606) (undo-tree-id217 . -1) (#("r" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -607) (undo-tree-id218 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -608) (undo-tree-id219 . -1) 609) nil (25196 10493 669716 807000) 0 nil])
([nil nil ((606 . 607)) nil (25196 10493 669713 324000) 0 nil])
([nil nil ((607 . 608)) nil (25196 10493 669712 239000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -606) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -607) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 608) nil (25196 10493 669710 124000) 0 nil])
([nil nil ((606 . 607)) nil (25196 10493 669692 288000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -606) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) 607) nil (25196 10493 669689 475000) 0 nil])
([nil nil ((606 . 619)) nil (25196 10493 669379 736000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . -612) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 613) nil (25196 10493 669376 859000) 0 nil])
([nil nil ((612 . 613)) nil (25196 10493 669349 686000) 0 nil])
([nil nil ((#("#+begin_quote

#+end_quote
" 0 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 14 15 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote) 15 26 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line) 26 27 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 713) (undo-tree-id285 . -26) (undo-tree-id286 . -12) (undo-tree-id287 . -26) (undo-tree-id288 . -26) (undo-tree-id289 . -12) (undo-tree-id290 . -26) 739 (t 25196 10493 675203 598000)) nil (25196 10548 741620 487000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t face org-block-end-line)) . -711) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t face org-block-end-line)) . -712) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . -713) (undo-tree-id282 . 1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 714) nil (25196 10548 741614 217000) 0 nil])
([nil nil ((1906 . 1909) 595) nil (25196 10548 741603 706000) 0 nil])
([nil nil ((nil org-todo-head nil 1913 . 1914) (nil org-todo-head nil 1909 . 1913) (nil org-todo-head nil 1908 . 1909) (nil org-todo-head nil 1907 . 1908) (nil fontified t 1913 . 1914) (nil line-prefix "" 1913 . 1914) (nil wrap-prefix #("* " 0 2 (face org-indent)) 1913 . 1914) (nil ws-butler-chg chg 1913 . 1914) (nil face org-level-1 1913 . 1914) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 1908) (1909 . 1915)) nil (25196 10548 741602 298000) 0 nil])
([nil nil ((nil org-todo-head nil 1908 . 1909) (nil fontified t 1908 . 1909) (nil line-prefix "" 1908 . 1909) (nil wrap-prefix #("* " 0 2 (face org-indent)) 1908 . 1909) (nil ws-butler-chg chg 1908 . 1909) (nil org-todo-head "TODO" 1908 . 1909) (nil face org-level-1 1908 . 1909) (#(" TODO " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1) 1 5 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face (org-todo org-todo org-level-1)) 5 6 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1)) . 1908) (1914 . 1915)) nil (25196 10548 741599 573000) 0 nil])
([nil nil ((nil fontified t 1909 . 1910) (nil line-prefix "" 1909 . 1910) (nil wrap-prefix #("* " 0 2 (face org-indent)) 1909 . 1910) (nil ws-butler-chg chg 1909 . 1910) (nil org-todo-head "TODO" 1909 . 1910) (nil face org-level-1 1909 . 1910) (nil fontified t 1908 . 1909) (nil line-prefix "" 1908 . 1909) (nil wrap-prefix #("* " 0 2 (face org-indent)) 1908 . 1909) (nil ws-butler-chg chg 1908 . 1909) (nil org-todo-head "TODO" 1908 . 1909) (nil face org-level-1 1908 . 1909) (#("* " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1)) . 1907) (1909 . 1912)) nil (25196 10548 741597 48000) 0 nil])
([nil nil ((1910 . 1914)) nil (25196 10548 741593 978000) 0 nil])
([nil nil ((1914 . 1918)) nil (25196 10548 741593 136000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) ws-butler-chg chg face org-level-2)) . -1916) (undo-tree-id267 . -1) (#("T" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) ws-butler-chg chg face org-level-2)) . -1917) (undo-tree-id268 . -1) 1918) nil (25196 10548 741592 93000) 0 nil])
([nil nil ((1916 . 1933)) nil (25196 10548 741590 67000) 0 nil])
([nil nil ((1933 . 1936) 619) nil (25196 10548 741589 388000) 0 nil])
([nil nil ((582 . 586) (#("* 

" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1) 2 3 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg delete face org-level-1) 3 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 1934) (undo-tree-id264 . 2) (undo-tree-id265 . -2) (undo-tree-id266 . -3) 1936) nil (25196 10548 741588 345000) 0 nil])
([nil nil ((nil org-todo-head nil 588 . 589) (nil org-todo-head nil 584 . 588) (nil org-todo-head nil 583 . 584) (nil org-todo-head nil 582 . 583) (nil fontified t 588 . 589) (nil line-prefix "" 588 . 589) (nil wrap-prefix #("* " 0 2 (face org-indent)) 588 . 589) (nil ws-butler-chg chg 588 . 589) (nil face org-level-1 588 . 589) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg face org-level-1)) . 583) (584 . 590)) nil (25196 10548 741585 223000) 0 nil])
([nil nil ((nil org-todo-head nil 583 . 584) (nil fontified t 583 . 584) (nil line-prefix "" 583 . 584) (nil wrap-prefix #("* " 0 2 (face org-indent)) 583 . 584) (nil ws-butler-chg chg 583 . 584) (nil org-todo-head "TODO" 583 . 584) (nil face org-level-1 583 . 584) (#(" TODO " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1) 1 5 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face (org-todo org-todo org-level-1)) 5 6 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1)) . 583) (589 . 590)) nil (25196 10548 741582 737000) 0 nil])
([nil nil ((nil fontified t 584 . 585) (nil line-prefix "" 584 . 585) (nil wrap-prefix #("* " 0 2 (face org-indent)) 584 . 585) (nil ws-butler-chg chg 584 . 585) (nil org-todo-head "TODO" 584 . 585) (nil face org-level-1 584 . 585) (nil fontified t 583 . 584) (nil line-prefix "" 583 . 584) (nil wrap-prefix #("* " 0 2 (face org-indent)) 583 . 584) (nil ws-butler-chg chg 583 . 584) (nil org-todo-head "TODO" 583 . 584) (nil face org-level-1 583 . 584) (#("* " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1) 1 2 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) ws-butler-chg chg org-todo-head "TODO" face org-level-1)) . 582) (584 . 587)) nil (25196 10548 741580 162000) 0 nil])
([nil nil ((#("** 
" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) ws-butler-chg chg face org-hide) 1 3 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) ws-butler-chg chg face org-level-2) 3 4 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) ws-butler-chg chg face org-level-2)) . 582) (undo-tree-id261 . 1) (undo-tree-id262 . -2) (undo-tree-id263 . -4) 584) nil (25196 10548 741577 92000) 0 nil])
([nil nil ((nil rear-nonsticky nil 621 . 622) (#("
" 0 1 (ws-butler-chg chg face org-level-2 fontified nil line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)))) . -625) (621 . 626)) nil (25196 10548 741574 108000) 0 nil])
([nil nil ((625 . 627)) nil (25196 10548 741573 33000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -625) (undo-tree-id259 . -1) (#("H" 0 1 (ws-butler-chg chg fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -626) (undo-tree-id260 . -1) 627) nil (25196 10548 741571 639000) 0 nil])
([nil nil ((625 . 633)) nil (25196 10548 741569 279000) 0 nil])
([nil nil ((633 . 639)) nil (25196 10548 741568 287000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . 638) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1)) nil (25196 10548 741563 785000) 0 nil])
([nil nil ((1951 . 1953) (t 25196 10548 748540 18000)) nil (25196 10966 202733 670000) 0 nil])
([nil nil ((1952 . 1953)) nil (25196 10966 202732 411000) 0 nil])
([nil nil ((1953 . 1965)) nil (25196 10966 202731 177000) 0 nil])
([nil nil ((#("t" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1961) (undo-tree-id432 . -1) (#("u" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1962) (undo-tree-id433 . -1) (#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1963) (undo-tree-id434 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1964) (undo-tree-id435 . -1) 1965) nil (25196 10966 202729 377000) 0 nil])
([nil nil ((1961 . 1964)) nil (25196 10966 202724 292000) 0 nil])
([nil nil ((1967 . 1969) (#("j" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1967) (undo-tree-id431 . -1) (1964 . 1968)) nil (25196 10966 202722 917000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1953) (undo-tree-id415 . -1) (#("h" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1954) (undo-tree-id416 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1955) (undo-tree-id417 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1956) (undo-tree-id418 . -1) (#("q" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1957) (undo-tree-id419 . -1) (#("u" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1958) (undo-tree-id420 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1959) (undo-tree-id421 . -1) (#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1960) (undo-tree-id422 . -1) (#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1961) (undo-tree-id423 . -1) (#("u" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1962) (undo-tree-id424 . -1) (#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1963) (undo-tree-id425 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1964) (undo-tree-id426 . -1) (#("b" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1965) (undo-tree-id427 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1966) (undo-tree-id428 . -1) (#("j" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1967) (undo-tree-id429 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1968) (undo-tree-id430 . -1) 1969) nil (25196 10966 202716 817000) 0 nil])
([nil nil ((1953 . 1972)) nil (25196 10966 202699 752000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1971) (undo-tree-id414 . -1) 1972) nil (25196 10966 202698 344000) 0 nil])
([nil nil ((1971 . 1973)) nil (25196 10966 202694 877000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1971) (undo-tree-id412 . -1) (#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1972) (undo-tree-id413 . -1) 1973) nil (25196 10966 202693 447000) 0 nil])
([nil nil ((1971 . 1973)) nil (25196 10966 202689 953000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1971) (undo-tree-id410 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1972) (undo-tree-id411 . -1) 1973) nil (25196 10966 202688 402000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1970) (undo-tree-id409 . -1) 1971) nil (25196 10966 202684 972000) 0 nil])
([nil nil ((1970 . 1974)) nil (25196 10966 202683 77000) 0 nil])
([nil nil ((1965 . 1972) (#("variaety" 0 8 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . 1965) (undo-tree-id407 . -7) (undo-tree-id408 . -7)) nil (25196 10966 202681 710000) 0 nil])
([nil nil ((1973 . 1974)) nil (25196 10966 202678 830000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1973) (undo-tree-id406 . -1) 1974) nil (25196 10966 202677 587000) 0 nil])
([nil nil ((1973 . 1993)) nil (25196 10966 202675 210000) 0 nil])
([nil nil ((1993 . 2001)) nil (25196 10966 202674 157000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1997) (undo-tree-id402 . -1) (#("r" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1998) (undo-tree-id403 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -1999) (undo-tree-id404 . -1) (#("i" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2000) (undo-tree-id405 . -1) 2001) nil (25196 10966 202672 176000) 0 nil])
([nil nil ((1997 . 2018)) nil (25196 10966 202666 922000) 0 nil])
([nil nil ((2018 . 2036)) nil (25196 10966 202665 689000) 0 nil])
([nil nil ((2037 . 2048) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2030) (2029 . 2030) (2036 . 2037)) nil (25196 10966 202664 188000) 0 nil])
([nil nil ((2048 . 2068)) nil (25196 10966 202662 125000) 0 nil])
([nil nil ((2067 . 2073)) nil (25196 10966 202660 782000) 0 nil])
([nil nil ((2073 . 2085)) nil (25196 10966 202659 703000) 0 nil])
([nil nil ((2086 . 2087)) nil (25196 10966 202658 686000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg face (org-verbatim) font-lock-multiline t org-emphasis t)) . -2074) (undo-tree-id401 . -1) 2075) nil (25196 10966 202657 469000) 0 nil])
([nil nil ((2074 . 2075)) nil (25196 10966 202655 555000) 0 nil])
([nil nil ((2087 . 2089)) nil (25196 10966 202654 596000) 0 nil])
([nil nil ((2089 . 2091)) nil (25196 10966 202653 347000) 0 nil])
([nil nil ((apply yas--snippet-revive 2089 2116 #s(yas--snippet nil nil #s(yas--exit 2103 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2103 nil) 5 nil nil nil nil)) (2089 . 2116) (#("<q" 0 2 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . 2089) (undo-tree-id400 . -2) 2091) nil (25196 10966 202651 904000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2263 . 2264) (nil fontified nil 2257 . 2264) (nil fontified nil 2181 . 2257) (nil fontified nil 2103 . 2181) (2103 . 2264)) nil (25196 10966 202648 858000) 0 nil])
([nil nil ((#("
" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg chg fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . -2263) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) 2264) nil (25196 10966 202644 555000) 0 nil])
([nil nil ((#("  noun
" 0 6 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg chg fontified t font-lock-fontified t font-lock-multiline t face org-quote) 6 7 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete font-lock-fontified t font-lock-multiline t face org-quote)) . 2257) (undo-tree-id291 . 1) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -5) (undo-tree-id295 . -6) (undo-tree-id296 . -6) (undo-tree-id297 . -6) (undo-tree-id298 . -6) (undo-tree-id299 . -6) (undo-tree-id300 . -6) (undo-tree-id301 . -6) (undo-tree-id302 . -6) (undo-tree-id303 . -6) (undo-tree-id304 . -6) (undo-tree-id305 . -6) (undo-tree-id306 . -6) (undo-tree-id307 . -6) (undo-tree-id308 . -6) (undo-tree-id309 . -6) (undo-tree-id310 . -6) (undo-tree-id311 . -6) (undo-tree-id312 . -6) (undo-tree-id313 . -6) (undo-tree-id314 . -6) (undo-tree-id315 . -6) (undo-tree-id316 . -6) (undo-tree-id317 . -6) (undo-tree-id318 . -6) (undo-tree-id319 . -6) (undo-tree-id320 . -6) (undo-tree-id321 . -6) (undo-tree-id322 . -6) (undo-tree-id323 . -6) (undo-tree-id324 . -6) (undo-tree-id325 . -6) (undo-tree-id326 . -6) (undo-tree-id327 . -6) (undo-tree-id328 . -6) (undo-tree-id329 . -6) (undo-tree-id330 . -6) (undo-tree-id331 . -6) (undo-tree-id332 . -6) (undo-tree-id333 . -6) (undo-tree-id334 . -6) (undo-tree-id335 . -6) (undo-tree-id336 . -6) (undo-tree-id337 . -6) (undo-tree-id338 . -5) (undo-tree-id339 . -5) (undo-tree-id340 . -5) (undo-tree-id341 . -5) (undo-tree-id342 . -5) (undo-tree-id343 . -5) (undo-tree-id344 . -5) (undo-tree-id345 . -5) (undo-tree-id346 . -5) (undo-tree-id347 . -5) (undo-tree-id348 . -5) (undo-tree-id349 . -5) (undo-tree-id350 . -5) (undo-tree-id351 . -5) (undo-tree-id352 . -5) (undo-tree-id353 . -5) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) 2262) nil (25196 10966 202608 24000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("       " 0 4 (face org-indent) 4 7 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#(")" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("s" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("         " 0 4 (face org-indent) 4 9 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face (org-quote org-list-dt))) . 2105) (#("c" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("i" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("s" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified nil font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("y" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("h" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("p" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg delete fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105) (#("(" 0 1 (line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) ws-butler-chg chg fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 2105)) nil (25196 10966 202219 231000) 0 nil])
([nil nil ((2259 . 2260) (t 25196 10966 208563 422000)) nil (25196 11196 87039 587000) 0 nil])
([nil nil ((2260 . 2270)) nil (25196 11196 87038 249000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2262) (undo-tree-id782 . -1) (#("s" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2263) (undo-tree-id783 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2264) (undo-tree-id784 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2265) (undo-tree-id785 . -1) (#("a" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2266) (undo-tree-id786 . -1) (#("r" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2267) (undo-tree-id787 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2268) (undo-tree-id788 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2269) (undo-tree-id789 . -1) 2270) nil (25196 11196 87035 587000) 0 nil])
([nil nil ((2262 . 2269)) nil (25196 11196 87027 321000) 0 nil])
([nil nil ((2269 . 2290)) nil (25196 11196 87026 244000) 0 nil])
([nil nil ((2290 . 2293)) nil (25196 11196 87025 170000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2291) (undo-tree-id780 . -1) (#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2292) (undo-tree-id781 . -1) 2293) nil (25196 11196 87023 942000) 0 nil])
([nil nil ((2291 . 2295)) nil (25196 11196 87021 167000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2294) (undo-tree-id779 . -1) 2295) nil (25196 11196 87019 551000) 0 nil])
([nil nil ((2294 . 2295)) nil (25196 11196 87017 627000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2294) (undo-tree-id778 . -1) 2295) nil (25196 11196 87016 374000) 0 nil])
([nil nil ((2294 . 2296) (#("`" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2294) (2294 . 2295)) nil (25196 11196 87014 79000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2294) (undo-tree-id777 . -1) 2295) nil (25196 11196 87012 395000) 0 nil])
([nil nil ((2260 . 2262) (#("`" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2260) (2260 . 2261)) nil (25196 11196 87010 65000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2261) (undo-tree-id776 . -1) 2262) nil (25196 11196 87008 464000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg delete)) . -2295) (undo-tree-id775 . -1) 2296) nil (25196 11196 87006 323000) 0 nil])
([nil nil ((2295 . 2296)) nil (25196 11196 87004 98000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2260) (undo-tree-id774 . -1) 2261) nil (25196 11196 87002 835000) 0 nil])
([nil nil ((2264 . 2265)) nil (25196 11196 87000 720000) 0 nil])
([nil nil ((2296 . 2302)) nil (25196 11196 86999 687000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2301) (undo-tree-id773 . -1) 2302) nil (25196 11196 86998 533000) 0 nil])
([nil nil ((2301 . 2311)) nil (25196 11196 86996 740000) 0 nil])
([nil nil ((2311 . 2313)) nil (25196 11196 86995 425000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2312) (undo-tree-id772 . -1) 2313) nil (25196 11196 86994 72000) 0 nil])
([nil nil ((2312 . 2326)) nil (25196 11196 86992 98000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2325) (undo-tree-id771 . -1) 2326) nil (25196 11196 86990 754000) 0 nil])
([nil nil ((2325 . 2338)) nil (25196 11196 86988 144000) 0 nil])
([nil nil ((2338 . 2348)) nil (25196 11196 86987 384000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2339) (undo-tree-id762 . -1) (#("l" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2340) (undo-tree-id763 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2341) (undo-tree-id764 . -1) (#("c" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2342) (undo-tree-id765 . -1) (#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2343) (undo-tree-id766 . -1) (#("r" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2344) (undo-tree-id767 . -1) (#("o" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2345) (undo-tree-id768 . -1) (#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2346) (undo-tree-id769 . -1) (#("s" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2347) (undo-tree-id770 . -1) 2348) nil (25196 11196 86985 36000) 0 nil])
([nil nil ((2339 . 2340)) nil (25196 11196 86975 983000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2339) (undo-tree-id761 . -1) 2340) nil (25196 11196 86974 807000) 0 nil])
([nil nil ((2345 . 2346) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2339) (2338 . 2339) (2339 . 2345)) nil (25196 11196 86972 446000) 0 nil])
([nil nil ((2346 . 2355)) nil (25196 11196 86970 783000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2354) (undo-tree-id760 . -1) 2355) nil (25196 11196 86969 649000) 0 nil])
([nil nil ((2354 . 2357)) nil (25196 11196 86967 704000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2356) (undo-tree-id759 . -1) 2357) nil (25196 11196 86966 428000) 0 nil])
([nil nil ((2356 . 2363)) nil (25196 11196 86964 294000) 0 nil])
([nil nil ((2363 . 2377)) nil (25196 11196 86963 437000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2371) (undo-tree-id753 . -1) (#("h" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2372) (undo-tree-id754 . -1) (#("o" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2373) (undo-tree-id755 . -1) (#("u" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2374) (undo-tree-id756 . -1) (#("g" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2375) (undo-tree-id757 . -1) (#("h" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2376) (undo-tree-id758 . -1) 2377) nil (25196 11196 86961 486000) 0 nil])
([nil nil ((2371 . 2392)) nil (25196 11196 86955 37000) 0 nil])
([nil nil ((2392 . 2400)) nil (25196 11196 86954 70000) 0 nil])
([nil nil ((2400 . 2401)) nil (25196 11196 86953 52000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2400) (undo-tree-id752 . -1) 2401) nil (25196 11196 86951 952000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2417) (2416 . 2417) (2400 . 2421)) nil (25196 11196 86949 987000) 0 nil])
([nil nil ((2421 . 2436)) nil (25196 11196 86948 780000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2424) (undo-tree-id740 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2425) (undo-tree-id741 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2426) (undo-tree-id742 . -1) (#("l" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2427) (undo-tree-id743 . -1) (#("o" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2428) (undo-tree-id744 . -1) (#("c" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2429) (undo-tree-id745 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2430) (undo-tree-id746 . -1) (#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2431) (undo-tree-id747 . -1) (#("i" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2432) (undo-tree-id748 . -1) (#("o" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2433) (undo-tree-id749 . -1) (#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2434) (undo-tree-id750 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2435) (undo-tree-id751 . -1) 2436) nil (25196 11196 86945 657000) 0 nil])
([nil nil ((2430 . 2445) (#("j" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2430) (undo-tree-id739 . -1) (2424 . 2431)) nil (25196 11196 86932 416000) 0 nil])
([nil nil ((2445 . 2455)) nil (25196 11196 86930 280000) 0 nil])
([nil nil ((2430 . 2431)) nil (25196 11196 86929 352000) 0 nil])
([nil nil ((2435 . 2436)) nil (25196 11196 86928 580000) 0 nil])
([nil nil ((2457 . 2458)) nil (25196 11196 86927 749000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2457) (undo-tree-id738 . -1) 2458) nil (25196 11196 86926 408000) 0 nil])
([nil nil ((2457 . 2464)) nil (25196 11196 86924 133000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2461) (undo-tree-id735 . -1) (#("l" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2462) (undo-tree-id736 . -1) (#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2463) (undo-tree-id737 . -1) 2464) nil (25196 11196 86922 693000) 0 nil])
([nil nil ((2461 . 2467)) nil (25196 11196 86918 900000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2458) (undo-tree-id726 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2459) (undo-tree-id727 . -1) (#("p" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2460) (undo-tree-id728 . -1) (#("i" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2461) (undo-tree-id729 . -1) (#("d" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2462) (undo-tree-id730 . -1) (#("l" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2463) (undo-tree-id731 . -1) (#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2464) (undo-tree-id732 . -1) (#("." 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2465) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2466) (undo-tree-id734 . -1) 2467) nil (25196 11196 86916 80000) 0 nil])
([nil nil ((2458 . 2460)) nil (25196 11196 86905 985000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2459) (undo-tree-id725 . -1) 2460) nil (25196 11196 86904 865000) 0 nil])
([nil nil ((2459 . 2473)) nil (25196 11196 86902 404000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2472) (undo-tree-id724 . -1) 2473) nil (25196 11196 86901 140000) 0 nil])
([nil nil ((2472 . 2490)) nil (25196 11196 86899 266000) 0 nil])
([nil nil ((2490 . 2497)) nil (25196 11196 86898 165000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2493) (undo-tree-id720 . -1) (#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2494) (undo-tree-id721 . -1) (#("y" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2495) (undo-tree-id722 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2496) (undo-tree-id723 . -1) 2497) nil (25196 11196 86896 419000) 0 nil])
([nil nil ((2500 . 2513) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2493) (2492 . 2493) (2493 . 2500)) nil (25196 11196 86880 479000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2512) (undo-tree-id719 . -1) 2513) nil (25196 11196 86878 852000) 0 nil])
([nil nil ((2512 . 2518)) nil (25196 11196 86877 160000) 0 nil])
([nil nil ((2518 . 2522)) nil (25196 11196 86876 299000) 0 nil])
([nil nil ((2518 . 2532) (#("semi" 0 4 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2518) (undo-tree-id718 . -4) 2522) nil (25196 11196 86875 40000) 0 nil])
([nil nil ((2532 . 2552)) nil (25196 11196 86872 780000) 0 nil])
([nil nil ((2552 . 2568)) nil (25196 11196 86871 894000) 0 nil])
([nil nil ((2558 . 2568) (#("nanoscale" 0 9 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . 2558) (undo-tree-id716 . -8) (undo-tree-id717 . -8)) nil (25196 11196 86870 493000) 0 nil])
([nil nil ((nil ws-butler-chg delete 2567 . 2568) (2558 . 2567) (#("nonsecular" 0 10 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . 2558) (undo-tree-id715 . -9)) nil (25196 11196 86867 822000) 0 nil])
([nil nil ((2458 . 2473) (#("istantaneously" 0 14 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . 2458) (undo-tree-id713 . -11) (undo-tree-id714 . -11)) nil (25196 11196 86865 620000) 0 nil])
([nil nil ((2563 . 2564)) nil (25196 11196 86863 50000) 0 nil])
([nil nil ((2570 . 2577)) nil (25196 11196 86861 988000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2576) (undo-tree-id712 . -1) 2577) nil (25196 11196 86860 814000) 0 nil])
([nil nil ((2576 . 2578)) nil (25196 11196 86859 59000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2571) (undo-tree-id705 . -1) (#("h" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2572) (undo-tree-id706 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2573) (undo-tree-id707 . -1) (#("r" 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2574) (undo-tree-id708 . -1) (#("e" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2575) (undo-tree-id709 . -1) (#("o" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2576) (undo-tree-id710 . -1) (#("f" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2577) (undo-tree-id711 . -1) 2578) nil (25196 11196 86856 661000) 0 nil])
([nil nil ((2577 . 2579) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2571) (2570 . 2571) (2571 . 2577)) nil (25196 11196 86847 197000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2577) (undo-tree-id703 . -1) (#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2578) (undo-tree-id704 . -1) 2579) nil (25196 11196 86844 251000) 0 nil])
([nil nil ((2577 . 2578)) nil (25196 11196 86840 254000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2577) (undo-tree-id702 . -1) 2578) nil (25196 11196 86838 801000) 0 nil])
([nil nil ((2577 . 2580)) nil (25196 11196 86836 206000) 0 nil])
([nil nil ((2580 . 2585)) nil (25196 11196 86835 13000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2584) (undo-tree-id701 . -1) 2585) nil (25196 11196 86833 675000) 0 nil])
([nil nil ((2584 . 2591)) nil (25196 11196 86831 309000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2590) (undo-tree-id700 . -1) 2591) nil (25196 11196 86829 468000) 0 nil])
([nil nil ((2590 . 2591)) nil (25196 11196 86827 374000) 0 nil])
([nil nil ((2591 . 2612)) nil (25196 11196 86826 211000) 0 nil])
([nil nil ((2612 . 2622)) nil (25196 11196 86825 151000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2621) (undo-tree-id699 . -1) 2622) nil (25196 11196 86823 805000) 0 nil])
([nil nil ((2621 . 2625)) nil (25196 11196 86821 991000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2623) (undo-tree-id697 . -1) (#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2624) (undo-tree-id698 . -1) 2625) nil (25196 11196 86820 566000) 0 nil])
([nil nil ((2623 . 2636)) nil (25196 11196 86810 836000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2635) (undo-tree-id696 . -1) 2636) nil (25196 11196 86809 598000) 0 nil])
([nil nil ((2635 . 2638)) nil (25196 11196 86807 541000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2637) (undo-tree-id695 . -1) 2638) nil (25196 11196 86806 156000) 0 nil])
([nil nil ((2637 . 2639)) nil (25196 11196 86803 221000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2638) (undo-tree-id694 . -1) 2639) nil (25196 11196 86801 445000) 0 nil])
([nil nil ((2638 . 2655)) nil (25196 11196 86798 496000) 0 nil])
([nil nil ((2663 . 2673) (#(" " 0 1 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) ws-butler-chg chg)) . 2651) (2650 . 2651) (2655 . 2663)) nil (25196 11196 86796 983000) 0 nil])
([nil nil ((2651 . 2656)) nil (25196 11196 86794 903000) 0 nil])
([nil nil ((2656 . 2661)) nil (25196 11196 86793 760000) 0 nil])
([nil nil ((2682 . 2703)) nil (25196 11196 86792 207000) 0 nil])
([nil nil ((2703 . 2704)) nil (25196 11196 86791 149000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2703) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) 2704) nil (25196 11196 86785 382000) 0 nil])
([nil nil ((2703 . 2704)) nil (25196 11196 86715 797000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2703) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 2704) nil (25196 11196 86712 0) 0 nil])
([nil nil ((2703 . 2706)) nil (25196 11196 86679 897000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2703) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("s" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2704) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("m" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg chg)) . -2705) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) 2706) nil (25196 11196 86665 169000) 0 nil])
([nil nil ((2703 . 2713)) nil (25196 11196 86202 979000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)) ws-butler-chg delete)) . 2713) (undo-tree-id436 . 1) 2712) nil (25196 11196 86197 163000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . 1952) (undo-tree-id790 . -1) (t 25196 11196 95242 976000)) nil (25196 11200 255791 263000) 0 nil])
([nil nil ((1924 . 1925)) nil (25196 11200 255780 799000) 0 nil])
([nil nil ((2820 . 2822) (t 25196 11200 261909 876000)) nil (25196 11562 603983 722000) 0 nil])
([nil nil ((2822 . 2826)) nil (25196 11562 603982 871000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2822) (undo-tree-id2396 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2823) (undo-tree-id2397 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2824) (undo-tree-id2398 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2825) (undo-tree-id2399 . -1) 2826) nil (25196 11562 603981 38000) 0 nil])
([nil nil ((2822 . 2824)) nil (25196 11562 603977 198000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2822) (undo-tree-id2394 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2823) (undo-tree-id2395 . -1) 2824) nil (25196 11562 603976 123000) 0 nil])
([nil nil ((2822 . 2823)) nil (25196 11562 603973 838000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2822) (undo-tree-id2393 . -1) 2823) nil (25196 11562 603972 924000) 0 nil])
([nil nil ((2822 . 2842)) nil (25196 11562 603971 488000) 0 nil])
([nil nil ((2842 . 2863)) nil (25196 11562 603970 758000) 0 nil])
([nil nil ((2863 . 2872)) nil (25196 11562 603969 963000) 0 nil])
([nil nil ((2872 . 2873)) nil (25196 11562 603969 211000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg face (writegood-duplicates-face))) . -2872) (undo-tree-id2392 . -1) 2873) nil (25196 11562 603968 269000) 0 nil])
([nil nil ((2872 . 2879)) nil (25196 11562 603966 310000) 0 nil])
([nil nil ((2879 . 2885)) nil (25196 11562 603965 548000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2883) (undo-tree-id2390 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2884) (undo-tree-id2391 . -1) 2885) nil (25196 11562 603964 448000) 0 nil])
([nil nil ((2885 . 2887) (#("(" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2885) (2883 . 2886)) nil (25196 11562 603961 684000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -2885) (undo-tree-id2389 . -1) (#(")" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 2886)) nil (25196 11562 603960 203000) 0 nil])
([nil nil ((2885 . 2905)) nil (25196 11562 603958 763000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2903) (undo-tree-id2387 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2904) (undo-tree-id2388 . -1) 2905) nil (25196 11562 603957 686000) 0 nil])
([nil nil ((2903 . 2904)) nil (25196 11562 603955 105000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2903) (undo-tree-id2386 . -1) 2904) nil (25196 11562 603954 163000) 0 nil])
([nil nil ((2907 . 2910) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 2901) (2900 . 2901) (2903 . 2907)) nil (25196 11562 603952 193000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2908) (undo-tree-id2384 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2909) (undo-tree-id2385 . -1) 2910) nil (25196 11562 603950 339000) 0 nil])
([nil nil ((2908 . 2915)) nil (25196 11562 603947 891000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2908) (undo-tree-id2377 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2909) (undo-tree-id2378 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2910) (undo-tree-id2379 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2911) (undo-tree-id2380 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2912) (undo-tree-id2381 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2913) (undo-tree-id2382 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2914) (undo-tree-id2383 . -1) 2915) nil (25196 11562 603945 970000) 0 nil])
([nil nil ((2908 . 2910)) nil (25196 11562 603939 728000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2908) (undo-tree-id2375 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2909) (undo-tree-id2376 . -1) 2910) nil (25196 11562 603938 578000) 0 nil])
([nil nil ((2908 . 2919)) nil (25196 11562 603935 962000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2918) (undo-tree-id2374 . -1) 2919) nil (25196 11562 603934 720000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2916) (undo-tree-id2372 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2917) (undo-tree-id2373 . -1) 2918) nil (25196 11562 603932 738000) 0 nil])
([nil nil ((2916 . 2937)) nil (25196 11562 603930 426000) 0 nil])
([nil nil ((2937 . 2938)) nil (25196 11562 603929 707000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2936) (undo-tree-id2370 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -2937) (undo-tree-id2371 . -1) 2938) nil (25196 11562 603928 552000) 0 nil])
([nil nil ((2936 . 2957)) nil (25196 11562 603925 829000) 0 nil])
([nil nil ((2957 . 2965)) nil (25196 11562 603925 119000) 0 nil])
([nil nil ((2983 . 2986) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 2978) (2977 . 2978) (2965 . 2983)) nil (25196 11562 603924 131000) 0 nil])
([nil nil ((2986 . 3007)) nil (25196 11562 603922 941000) 0 nil])
([nil nil ((3007 . 3014)) nil (25196 11562 603922 149000) 0 nil])
([nil nil ((3014 . 3029)) nil (25196 11562 603921 490000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3025) (undo-tree-id2366 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3026) (undo-tree-id2367 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3027) (undo-tree-id2368 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3028) (undo-tree-id2369 . -1) 3029) nil (25196 11562 603919 927000) 0 nil])
([nil nil ((3025 . 3046)) nil (25196 11562 603915 643000) 0 nil])
([nil nil ((3046 . 3052)) nil (25196 11562 603914 797000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3051) (undo-tree-id2365 . -1) 3052) nil (25196 11562 603913 613000) 0 nil])
([nil nil ((3051 . 3055)) nil (25196 11562 603912 17000) 0 nil])
([nil nil ((3055 . 3057)) nil (25196 11562 603911 196000) 0 nil])
([nil nil ((3057 . 3058)) nil (25196 11562 603910 445000) 0 nil])
([nil nil ((3058 . 3063)) nil (25196 11562 603909 794000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3062) (undo-tree-id2364 . -1) 3063) nil (25196 11562 603908 857000) 0 nil])
([nil nil ((3062 . 3066)) nil (25196 11562 603907 336000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3059) (undo-tree-id2357 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3060) (undo-tree-id2358 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3061) (undo-tree-id2359 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3062) (undo-tree-id2360 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3063) (undo-tree-id2361 . -1) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3064) (undo-tree-id2362 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3065) (undo-tree-id2363 . -1) 3066) nil (25196 11562 603905 426000) 0 nil])
([nil nil ((3059 . 3064)) nil (25196 11562 603899 317000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3063) (undo-tree-id2356 . -1) 3064) nil (25196 11562 603898 289000) 0 nil])
([nil nil ((3063 . 3074)) nil (25196 11562 603896 850000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3071) (undo-tree-id2353 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3072) (undo-tree-id2354 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3073) (undo-tree-id2355 . -1) 3074) nil (25196 11562 603895 289000) 0 nil])
([nil nil ((3071 . 3083)) nil (25196 11562 603892 100000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3071) (undo-tree-id2346 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3072) (undo-tree-id2347 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3073) (undo-tree-id2348 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3074) (undo-tree-id2349 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3075) (undo-tree-id2350 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3076) (undo-tree-id2351 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3077) (undo-tree-id2352 . -1) 3078) nil (25196 11562 603890 57000) 0 nil])
([nil nil ((3071 . 3077)) nil (25196 11562 603883 50000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3075) (undo-tree-id2344 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3076) (undo-tree-id2345 . -1) 3077) nil (25196 11562 603881 869000) 0 nil])
([nil nil ((3075 . 3077)) nil (25196 11562 603879 449000) 0 nil])
([nil nil ((3082 . 3083)) nil (25196 11562 603878 613000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3082) (undo-tree-id2343 . -1) 3083) nil (25196 11562 603877 574000) 0 nil])
([nil nil ((3082 . 3095)) nil (25196 11562 603876 29000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3091) (undo-tree-id2339 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3092) (undo-tree-id2340 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3093) (undo-tree-id2341 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3094) (undo-tree-id2342 . -1) 3095) nil (25196 11562 603874 625000) 0 nil])
([nil nil ((3091 . 3102)) nil (25196 11562 603870 479000) 0 nil])
([nil nil ((3102 . 3116)) nil (25196 11562 603869 742000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3115) (undo-tree-id2338 . -1) 3116) nil (25196 11562 603868 712000) 0 nil])
([nil nil ((3115 . 3135)) nil (25196 11562 603867 254000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3134) (undo-tree-id2337 . -1) 3135) nil (25196 11562 603866 328000) 0 nil])
([nil nil ((3134 . 3145)) nil (25196 11562 603864 625000) 0 nil])
([nil nil ((3146 . 3166) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3127) (3126 . 3127) (3145 . 3146)) nil (25196 11562 603863 603000) 0 nil])
([nil nil ((3166 . 3184)) nil (25196 11562 603862 354000) 0 nil])
([nil nil ((3184 . 3188)) nil (25196 11562 603861 476000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3187) (undo-tree-id2336 . -1) 3188) nil (25196 11562 603860 525000) 0 nil])
([nil nil ((3187 . 3190)) nil (25196 11562 603859 116000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3188) (undo-tree-id2334 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3189) (undo-tree-id2335 . -1) 3190) nil (25196 11562 603857 994000) 0 nil])
([nil nil ((3188 . 3209)) nil (25196 11562 603855 702000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3208) (3207 . 3208) (3209 . 3211)) nil (25196 11562 603854 761000) 0 nil])
([nil nil ((3211 . 3232)) nil (25196 11562 603853 794000) 0 nil])
([nil nil ((3232 . 3236)) nil (25196 11562 603853 147000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3194) (undo-tree-id2330 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3195) (undo-tree-id2331 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3196) (undo-tree-id2332 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3197) (undo-tree-id2333 . -1) 3198) nil (25196 11562 603851 631000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3192) (undo-tree-id2328 . -1) (#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3193) (undo-tree-id2329 . -1) 3194) nil (25196 11562 603847 428000) 0 nil])
([nil nil ((3192 . 3194)) nil (25196 11562 603844 979000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3202) (undo-tree-id2327 . -1) 3203) nil (25196 11562 603843 928000) 0 nil])
([nil nil ((3202 . 3203)) nil (25196 11562 603842 212000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3199) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3200) (undo-tree-id2323 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3201) (undo-tree-id2324 . 1) (undo-tree-id2325 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3202) (undo-tree-id2326 . -1) 3203) nil (25196 11562 603840 47000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3196) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3197) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3198) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) 3199) nil (25196 11562 603831 982000) 0 nil])
([nil nil ((3196 . 3204)) nil (25196 11562 603822 910000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3229) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3230) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3231) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3232) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) 3233) nil (25196 11562 603810 446000) 0 nil])
([nil nil ((3229 . 3231)) nil (25196 11562 603583 197000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3208) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3209) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3210) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3211) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3212) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3213) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3214) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3215) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3216) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3217) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3218) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#("k" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3219) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3220) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3221) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) 3222) nil (25196 11562 603525 423000) 0 nil])
([nil nil ((3217 . 3228) (t 25196 11562 628596 863000)) nil (25196 11678 438275 989000) 0 nil])
([nil nil ((3227 . 3229) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3227) (undo-tree-id2811 . -1) 3228) nil (25196 11678 438274 778000) 0 nil])
([nil nil ((3247 . 3249) (#("j" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3247) (undo-tree-id2810 . -1) (3229 . 3248)) nil (25196 11678 438272 725000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3247) (undo-tree-id2808 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3248) (undo-tree-id2809 . -1) 3249) nil (25196 11678 438270 607000) 0 nil])
([nil nil ((3247 . 3248)) nil (25196 11678 438267 545000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3245) (undo-tree-id2805 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3246) (undo-tree-id2806 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3247) (undo-tree-id2807 . -1) 3248) nil (25196 11678 438266 185000) 0 nil])
([nil nil ((3245 . 3252)) nil (25196 11678 438262 936000) 0 nil])
([nil nil ((3252 . 3273)) nil (25196 11678 438262 234000) 0 nil])
([nil nil ((3273 . 3287)) nil (25196 11678 438261 480000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3286) (undo-tree-id2804 . -1) 3287) nil (25196 11678 438260 488000) 0 nil])
([nil nil ((3286 . 3295)) nil (25196 11678 438245 399000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3286) (undo-tree-id2795 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3287) (undo-tree-id2796 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3288) (undo-tree-id2797 . -1) (#("y" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3289) (undo-tree-id2798 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3290) (undo-tree-id2799 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3291) (undo-tree-id2800 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3292) (undo-tree-id2801 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3293) (undo-tree-id2802 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3294) (undo-tree-id2803 . -1) 3295) nil (25196 11678 438242 399000) 0 nil])
([nil nil ((3286 . 3307)) nil (25196 11678 438233 197000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3306) (undo-tree-id2794 . -1) 3307) nil (25196 11678 438232 65000) 0 nil])
([nil nil ((3312 . 3317) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3309) (3308 . 3309) (3306 . 3312)) nil (25196 11678 438229 793000) 0 nil])
([nil nil ((3317 . 3332)) nil (25196 11678 438228 124000) 0 nil])
([nil nil ((#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3331) (undo-tree-id2793 . -1) 3332) nil (25196 11678 438226 938000) 0 nil])
([nil nil ((3331 . 3348)) nil (25196 11678 438225 47000) 0 nil])
([nil nil ((3347 . 3349) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3347) (undo-tree-id2792 . -1) 3348) nil (25196 11678 438223 892000) 0 nil])
([nil nil ((3349 . 3361)) nil (25196 11678 438221 530000) 0 nil])
([nil nil ((3361 . 3378)) nil (25196 11678 438220 487000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3368) (undo-tree-id2782 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3369) (undo-tree-id2783 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3370) (undo-tree-id2784 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3371) (undo-tree-id2785 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3372) (undo-tree-id2786 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3373) (undo-tree-id2787 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3374) (undo-tree-id2788 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3375) (undo-tree-id2789 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3376) (undo-tree-id2790 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3377) (undo-tree-id2791 . -1) 3378) nil (25196 11678 438217 457000) 0 nil])
([nil nil ((3368 . 3371)) nil (25196 11678 438205 615000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3368) (undo-tree-id2779 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3369) (undo-tree-id2780 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3370) (undo-tree-id2781 . -1) 3371) nil (25196 11678 438204 115000) 0 nil])
([nil nil ((3368 . 3369)) nil (25196 11678 438199 931000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3368) (undo-tree-id2778 . -1) 3369) nil (25196 11678 438198 839000) 0 nil])
([nil nil ((3368 . 3376)) nil (25196 11678 438197 49000) 0 nil])
([nil nil ((3376 . 3389)) nil (25196 11678 438196 167000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3386) (undo-tree-id2775 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3387) (undo-tree-id2776 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3388) (undo-tree-id2777 . -1) 3389) nil (25196 11678 438194 356000) 0 nil])
([nil nil ((3386 . 3407)) nil (25196 11678 438190 352000) 0 nil])
([nil nil ((3407 . 3410)) nil (25196 11678 438189 449000) 0 nil])
([nil nil ((3410 . 3431)) nil (25196 11678 438188 514000) 0 nil])
([nil nil ((3435 . 3448) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3425) (3424 . 3425) (3431 . 3435)) nil (25196 11678 438186 867000) 0 nil])
([nil nil ((3448 . 3458)) nil (25196 11678 438184 981000) 0 nil])
([nil nil ((#("t" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3407) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (#("o" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3408) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3409) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (#("p" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3410) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (#("r" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3411) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (#("o" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3412) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3413) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3414) (undo-tree-id2763 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3415) (undo-tree-id2764 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3416) (undo-tree-id2765 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3417) (undo-tree-id2766 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3418) (undo-tree-id2767 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3419) (undo-tree-id2768 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3420) (undo-tree-id2769 . -1) (#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3421) (undo-tree-id2770 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3422) (undo-tree-id2771 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3423) (undo-tree-id2772 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3424) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) 3425) nil (25196 11678 438175 134000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3403) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3404) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3405) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3406) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) 3407) nil (25196 11678 437972 733000) 0 nil])
([nil nil ((3403 . 3407)) nil (25196 11678 437603 876000) 0 nil])
([nil nil ((3433 . 3436) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3426) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (3425 . 3426) (3421 . 3433)) nil (25196 11678 437602 231000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3450) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) 3451) nil (25196 11678 437590 651000) 0 nil])
([nil nil ((3450 . 3451)) nil (25196 11678 437403 749000) 0 nil])
([nil nil ((3426 . 3439) (t 25196 11678 468603 359000)) nil (25196 11686 584573 801000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3431) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3432) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3433) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3434) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3435) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3436) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (#("y" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t)) . -3437) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) 3438 (t 25196 11686 608603 815000)) nil (25196 11708 529834 610000) 0 nil])
([nil nil ((3431 . 3438)) nil (25196 11708 529817 964000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3436) (undo-tree-id2814 . -1) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3437) (undo-tree-id2815 . -1) 3438) nil (25196 11708 529815 973000) 0 nil])
([nil nil ((3436 . 3440)) nil (25196 11708 529811 99000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3438) (undo-tree-id2812 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3439) (undo-tree-id2813 . -1) 3440) nil (25196 11708 529807 771000) 0 nil])
([nil nil ((3438 . 3441)) nil (25196 11708 529792 506000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -3471) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) 3472 (t 25196 11708 561938 379000)) nil (25196 11813 349742 203000) 0 nil])
([nil nil ((3471 . 3473)) nil (25196 11813 349739 825000) 0 nil])
([nil nil ((3473 . 3474)) nil (25196 11813 349738 890000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3473) (undo-tree-id2895 . -1) 3474) nil (25196 11813 349737 993000) 0 nil])
([nil nil ((3473 . 3491)) nil (25196 11813 349736 718000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3490) (undo-tree-id2894 . -1) 3491) nil (25196 11813 349735 896000) 0 nil])
([nil nil ((3490 . 3500)) nil (25196 11813 349734 487000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3498) (undo-tree-id2892 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3499) (undo-tree-id2893 . -1) 3500) nil (25196 11813 349733 347000) 0 nil])
([nil nil ((3498 . 3519)) nil (25196 11813 349729 187000) 0 nil])
([nil nil ((3519 . 3526)) nil (25196 11813 349728 363000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3523) (undo-tree-id2889 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3524) (undo-tree-id2890 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3525) (undo-tree-id2891 . -1) 3526) nil (25196 11813 349727 205000) 0 nil])
([nil nil ((3523 . 3529)) nil (25196 11813 349723 597000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3526) (undo-tree-id2886 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3527) (undo-tree-id2887 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3528) (undo-tree-id2888 . -1) 3529) nil (25196 11813 349722 376000) 0 nil])
([nil nil ((3526 . 3531)) nil (25196 11813 349719 466000) 0 nil])
([nil nil ((3531 . 3552)) nil (25196 11813 349718 810000) 0 nil])
([nil nil ((3557 . 3558) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3554) (3553 . 3554) (3552 . 3557)) nil (25196 11813 349717 775000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3557) (undo-tree-id2885 . -1) 3558) nil (25196 11813 349716 277000) 0 nil])
([nil nil ((3557 . 3558)) nil (25196 11813 349714 845000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3557) (undo-tree-id2884 . -1) 3558) nil (25196 11813 349713 957000) 0 nil])
([nil nil ((3557 . 3559)) nil (25196 11813 349712 238000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3557) (undo-tree-id2882 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3558) (undo-tree-id2883 . -1) 3559) nil (25196 11813 349711 135000) 0 nil])
([nil nil ((3557 . 3560)) nil (25196 11813 349708 547000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3557) (undo-tree-id2879 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3558) (undo-tree-id2880 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3559) (undo-tree-id2881 . -1) 3560) nil (25196 11813 349706 775000) 0 nil])
([nil nil ((3557 . 3562)) nil (25196 11813 349703 595000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3559) (undo-tree-id2876 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3560) (undo-tree-id2877 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3561) (undo-tree-id2878 . -1) 3562) nil (25196 11813 349702 502000) 0 nil])
([nil nil ((3559 . 3580)) nil (25196 11813 349698 942000) 0 nil])
([nil nil ((3580 . 3589)) nil (25196 11813 349698 311000) 0 nil])
([nil nil ((3559 . 3560)) nil (25196 11813 349697 584000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3559) (undo-tree-id2875 . -1) 3560) nil (25196 11813 349696 765000) 0 nil])
([nil nil ((3557 . 3572) (#("eletromagnetic" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg) 2 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg delete) 3 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3557) (undo-tree-id2872 . 12) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1)) nil (25196 11813 349695 40000) 0 nil])
([nil nil ((3590 . 3605)) nil (25196 11813 349691 946000) 0 nil])
([nil nil ((3594 . 3604) (#("unfiseable" 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3594) (undo-tree-id2870 . -9) (undo-tree-id2871 . -9)) nil (25196 11813 349690 837000) 0 nil])
([nil nil ((3605 . 3606)) nil (25196 11813 349688 404000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3605) (undo-tree-id2869 . -1) 3606) nil (25196 11813 349687 221000) 0 nil])
([nil nil ((3593 . 3596)) nil (25196 11813 349685 224000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3602) (undo-tree-id2863 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3603) (undo-tree-id2864 . -1) (#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3604) (undo-tree-id2865 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3605) (undo-tree-id2866 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3606) (undo-tree-id2867 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg delete)) . -3607) (undo-tree-id2868 . -1) 3608) nil (25196 11813 349683 366000) 0 nil])
([nil nil ((3602 . 3622)) nil (25196 11813 349677 55000) 0 nil])
([nil nil ((3608 . 3617) (#("pratical" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 3608) (undo-tree-id2861 . -7) (undo-tree-id2862 . -7)) nil (25196 11813 349675 632000) 0 nil])
([nil nil ((3623 . 3624) 3617) nil (25196 11813 349672 881000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3623) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) 3624) nil (25196 11813 349671 401000) 0 nil])
([nil nil ((3619 . 3625) (3618 . 3620) (#("(" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3618) (3617 . 3619)) nil (25196 11813 349667 656000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3624) (undo-tree-id2857 . -1) 3625) nil (25196 11813 349665 938000) 0 nil])
([nil nil ((3624 . 3630)) nil (25196 11813 349663 868000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3626) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) 3627) nil (25196 11813 349661 932000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . -3626) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) 3627) nil (25196 11813 349649 258000) 0 nil])
([nil nil ((3626 . 3627)) nil (25196 11813 349554 569000) 0 nil])
([nil nil ((3619 . 3629) (#("commertial" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 9 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3619) (undo-tree-id4245 . 2) (undo-tree-id4246 . -7) (undo-tree-id4247 . -7) (t 25196 11813 381944 258000)) nil (25196 11824 128155 297000) 0 nil])
([nil nil ((3638 . 3655) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 3631) (3630 . 3631) (3636 . 3638)) nil (25196 11824 128151 481000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3637) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (#("A" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3638) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3639) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3640) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3641) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3642) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3643) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3644) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3645) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3646) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3647) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3648) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3649) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3650) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3651) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3652) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3653) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -3654) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) 3655) nil (25196 11824 128100 354000) 0 nil])
([nil nil ((3653 . 3741) 3719 (#("Limited diminished voltage gap for conduction and noise problems.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 3653) (undo-tree-id4302 . -66) (undo-tree-id4303 . -5) (undo-tree-id4304 . -5) (undo-tree-id4305 . -5) (undo-tree-id4306 . -5) (undo-tree-id4307 . -5) 3719 (t 25196 11824 155278 195000)) nil (25196 11845 79562 93000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg delete)) . 3653) (#("-" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg face (org-list-dt))) . 3653)) nil (25196 11845 79557 343000) 0 nil])
([nil nil ((3652 . 3653)) nil (25196 11845 79556 533000) 0 nil])
([nil nil ((3653 . 3655)) nil (25196 11845 79555 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 3653 3680 #s(yas--snippet nil nil #s(yas--exit 3667 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3667 nil) 6 nil nil nil nil)) (3653 . 3680) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . 3653) (undo-tree-id4301 . -2) 3655) nil (25196 11845 79554 375000) 0 nil])
([nil nil ((#("
Limited capability to cool the processors with =air-fans= - a standard in
  industry.
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete) 1 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete) 2 48 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg) 48 58 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg face (org-verbatim) font-lock-multiline t org-emphasis t) 58 74 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg) 74 75 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg) 75 87 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . 3680) (undo-tree-id4293 . -75) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -75) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -75) (undo-tree-id4300 . -75) 3755) nil (25196 11845 79551 828000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3667 . 3668) (#("
" 0 1 (ws-butler-chg chg fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)))) . -3754) (3667 . 3755)) nil (25196 11845 79544 963000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote)) . -3742) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) 3743) nil (25196 11845 79543 718000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-quote)) . -3742) (undo-tree-id4290 . -1) 3743) nil (25196 11845 79540 982000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg font-lock-fontified t font-lock-multiline t face org-block-begin-line)) . -3666) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg rear-nonsticky t font-lock-fontified t font-lock-multiline t face org-quote)) . -3667) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) 3668) nil (25196 11845 79535 219000) 0 nil])
([nil nil ((#("V" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3641) (undo-tree-id4747 . -1) (#("o" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3642) (undo-tree-id4748 . -1) (#("l" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3643) (undo-tree-id4749 . -1) (#("t" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3644) (undo-tree-id4750 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3645) (undo-tree-id4751 . -1) (#("g" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3646) (undo-tree-id4752 . -1) (#("e" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3647) (undo-tree-id4753 . -1) (#(" " 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3648) (undo-tree-id4754 . -1) (#("G" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3649) (undo-tree-id4755 . -1) (#("a" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3650) (undo-tree-id4756 . -1) (#("p" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -3651) (undo-tree-id4757 . -1) 3652 (t 25196 11845 108612 704000)) nil (25196 12087 819779 23000) 0 nil])
([nil nil ((3641 . 3648)) nil (25196 12087 819769 936000) 0 nil])
([nil nil ((3758 . 3760)) nil (25196 12087 819769 446000) 0 nil])
([nil nil ((3760 . 3781)) nil (25196 12087 819768 651000) 0 nil])
([nil nil ((3781 . 3802)) nil (25196 12087 819768 31000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3801) (undo-tree-id4746 . -1) 3802) nil (25196 12087 819767 287000) 0 nil])
([nil nil ((3801 . 3802)) nil (25196 12087 819765 973000) 0 nil])
([nil nil ((3793 . 3794)) nil (25196 12087 819765 386000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg face (org-verbatim) font-lock-multiline t org-emphasis t)) . -3793) (undo-tree-id4745 . -1) 3794) nil (25196 12087 819764 611000) 0 nil])
([nil nil ((3793 . 3794)) nil (25196 12087 819763 348000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3802) (undo-tree-id4744 . -1) 3803) nil (25196 12087 819762 491000) 0 nil])
([nil nil ((3802 . 3812)) nil (25196 12087 819761 160000) 0 nil])
([nil nil ((3812 . 3813)) nil (25196 12087 819760 461000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3812) (undo-tree-id4743 . -1) 3813) nil (25196 12087 819759 708000) 0 nil])
([nil nil ((3812 . 3813)) nil (25196 12087 819758 309000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3812) (undo-tree-id4742 . -1) 3813) nil (25196 12087 819757 484000) 0 nil])
([nil nil ((3812 . 3824)) nil (25196 12087 819756 332000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3820) (undo-tree-id4738 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3821) (undo-tree-id4739 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3822) (undo-tree-id4740 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3823) (undo-tree-id4741 . -1) 3824) nil (25196 12087 819755 32000) 0 nil])
([nil nil ((3820 . 3822)) nil (25196 12087 819750 856000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3816) (undo-tree-id4737 . -1) 3817) nil (25196 12087 819750 32000) 0 nil])
([nil nil ((3816 . 3817)) nil (25196 12087 819748 829000) 0 nil])
([nil nil ((3822 . 3835)) nil (25196 12087 819748 166000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4061 . 4062) (nil fontified nil 3989 . 4062) (nil fontified nil 3913 . 3989) (nil fontified nil 3835 . 3913) (3835 . 4062) 3834) nil (25196 12087 819747 423000) 0 nil])
([nil nil ((#(" to approximate the limit. The point is that the commercial availability of a
 fan is often a determinant of the air cooling limit. The limit here is set
 by the physics of enthalpy transport and the economy of procuring fans.
" 0 78 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg fontified nil) 78 147 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil) 147 153 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil face (writegood-passive-voice-face)) 153 154 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil) 154 226 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil) 226 227 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil rear-nonsticky nil)) . 3835) (undo-tree-id4725 . -226) (undo-tree-id4726 . -227) (undo-tree-id4727 . -227) (undo-tree-id4728 . -227) (undo-tree-id4729 . 54) (undo-tree-id4730 . -181) (undo-tree-id4731 . -227) (undo-tree-id4732 . -227) (undo-tree-id4733 . -227) (undo-tree-id4734 . -227) (undo-tree-id4735 . -227) (undo-tree-id4736 . -227) (nil fontified t 3835 . 3913) (nil fontified t 3988 . 3989) (nil fontified t 3982 . 3988) (nil fontified t 3913 . 3982) (nil rear-nonsticky t 4061 . 4062)) nil (25196 12087 819745 460000) 0 nil])
([nil nil ((3835 . 3836) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3835) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (3834 . 3835)) nil (25196 12087 819736 698000) 0 nil])
([nil nil ((3836 . 3838)) nil (25196 12087 819728 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 3836 3863 #s(yas--snippet nil nil #s(yas--exit 3850 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3850 nil) 7 nil nil nil nil)) (3836 . 3863) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3836) (undo-tree-id4689 . -2) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -2) (undo-tree-id4702 . -1) (undo-tree-id4703 . -2) (undo-tree-id4704 . -2) (undo-tree-id4705 . -2) (undo-tree-id4706 . -2) (undo-tree-id4707 . -2) (undo-tree-id4708 . -2) (undo-tree-id4709 . -2) (undo-tree-id4710 . -2) (undo-tree-id4711 . -2) (undo-tree-id4712 . -2) (undo-tree-id4713 . -2) 3838) nil (25196 12087 819726 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4076 . 4077) (nil fontified nil 4004 . 4077) (nil fontified nil 3928 . 4004) (nil fontified nil 3850 . 3928) (3850 . 4077)) nil (25196 12087 819709 594000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg font-lock-fontified t font-lock-multiline t face org-quote)) . 4077) (undo-tree-id4685 . 1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1)) nil (25196 12087 819707 834000) 0 nil])
([nil nil ((#("to approximate the limit." 0 25 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified t font-lock-fontified t font-lock-multiline t face org-quote)) . 3851) (undo-tree-id4310 . -24) (undo-tree-id4311 . -24) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -2) (undo-tree-id4324 . -1) (undo-tree-id4325 . -2) (undo-tree-id4326 . -2) (undo-tree-id4327 . -2) (undo-tree-id4328 . -2) (undo-tree-id4329 . -2) (undo-tree-id4330 . -3) (undo-tree-id4331 . -2) (undo-tree-id4332 . -3) (undo-tree-id4333 . -3) (undo-tree-id4334 . -3) (undo-tree-id4335 . -3) (undo-tree-id4336 . -3) (undo-tree-id4337 . -4) (undo-tree-id4338 . -3) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (undo-tree-id4341 . -4) (undo-tree-id4342 . -4) (undo-tree-id4343 . -4) (undo-tree-id4344 . -5) (undo-tree-id4345 . -4) (undo-tree-id4346 . -5) (undo-tree-id4347 . -5) (undo-tree-id4348 . -5) (undo-tree-id4349 . -5) (undo-tree-id4350 . -5) (undo-tree-id4351 . -6) (undo-tree-id4352 . -5) (undo-tree-id4353 . -6) (undo-tree-id4354 . -6) (undo-tree-id4355 . -6) (undo-tree-id4356 . -6) (undo-tree-id4357 . -6) (undo-tree-id4358 . -7) (undo-tree-id4359 . -6) (undo-tree-id4360 . -7) (undo-tree-id4361 . -7) (undo-tree-id4362 . -7) (undo-tree-id4363 . -7) (undo-tree-id4364 . -7) (undo-tree-id4365 . -8) (undo-tree-id4366 . -7) (undo-tree-id4367 . -8) (undo-tree-id4368 . -8) (undo-tree-id4369 . -8) (undo-tree-id4370 . -8) (undo-tree-id4371 . -8) (undo-tree-id4372 . -9) (undo-tree-id4373 . -8) (undo-tree-id4374 . -9) (undo-tree-id4375 . -9) (undo-tree-id4376 . -9) (undo-tree-id4377 . -9) (undo-tree-id4378 . -9) (undo-tree-id4379 . -10) (undo-tree-id4380 . -9) (undo-tree-id4381 . -10) (undo-tree-id4382 . -10) (undo-tree-id4383 . -10) (undo-tree-id4384 . -10) (undo-tree-id4385 . -10) (undo-tree-id4386 . -11) (undo-tree-id4387 . -10) (undo-tree-id4388 . -11) (undo-tree-id4389 . -11) (undo-tree-id4390 . -11) (undo-tree-id4391 . -11) (undo-tree-id4392 . -11) (undo-tree-id4393 . -12) (undo-tree-id4394 . -11) (undo-tree-id4395 . -12) (undo-tree-id4396 . -12) (undo-tree-id4397 . -12) (undo-tree-id4398 . -12) (undo-tree-id4399 . -12) (undo-tree-id4400 . -13) (undo-tree-id4401 . -12) (undo-tree-id4402 . -13) (undo-tree-id4403 . -13) (undo-tree-id4404 . -13) (undo-tree-id4405 . -13) (undo-tree-id4406 . -13) (undo-tree-id4407 . -14) (undo-tree-id4408 . -13) (undo-tree-id4409 . -14) (undo-tree-id4410 . -14) (undo-tree-id4411 . -14) (undo-tree-id4412 . -14) (undo-tree-id4413 . -14) (undo-tree-id4414 . -15) (undo-tree-id4415 . -14) (undo-tree-id4416 . -15) (undo-tree-id4417 . -15) (undo-tree-id4418 . -15) (undo-tree-id4419 . -15) (undo-tree-id4420 . -15) (undo-tree-id4421 . -16) (undo-tree-id4422 . -15) (undo-tree-id4423 . -16) (undo-tree-id4424 . -16) (undo-tree-id4425 . -16) (undo-tree-id4426 . -16) (undo-tree-id4427 . -16) (undo-tree-id4428 . -17) (undo-tree-id4429 . -16) (undo-tree-id4430 . -17) (undo-tree-id4431 . -17) (undo-tree-id4432 . -17) (undo-tree-id4433 . -17) (undo-tree-id4434 . -17) (undo-tree-id4435 . -18) (undo-tree-id4436 . -17) (undo-tree-id4437 . -18) (undo-tree-id4438 . -18) (undo-tree-id4439 . -18) (undo-tree-id4440 . -18) (undo-tree-id4441 . -18) (undo-tree-id4442 . -19) (undo-tree-id4443 . -18) (undo-tree-id4444 . -19) (undo-tree-id4445 . -19) (undo-tree-id4446 . -19) (undo-tree-id4447 . -19) (undo-tree-id4448 . -19) (undo-tree-id4449 . -20) (undo-tree-id4450 . -19) (undo-tree-id4451 . -20) (undo-tree-id4452 . -20) (undo-tree-id4453 . -20) (undo-tree-id4454 . -20) (undo-tree-id4455 . -20) (undo-tree-id4456 . -21) (undo-tree-id4457 . -20) (undo-tree-id4458 . -21) (undo-tree-id4459 . -21) (undo-tree-id4460 . -21) (undo-tree-id4461 . -21) (undo-tree-id4462 . -21) (undo-tree-id4463 . -21) (undo-tree-id4464 . -21) (undo-tree-id4465 . -21) (undo-tree-id4466 . -21) (undo-tree-id4467 . -21) (undo-tree-id4468 . -22) (undo-tree-id4469 . -21) (undo-tree-id4470 . -22) (undo-tree-id4471 . -22) (undo-tree-id4472 . -22) (undo-tree-id4473 . -22) (undo-tree-id4474 . -22) (undo-tree-id4475 . -22) (undo-tree-id4476 . -22) (undo-tree-id4477 . -22) (undo-tree-id4478 . -22) (undo-tree-id4479 . -22) (undo-tree-id4480 . -23) (undo-tree-id4481 . -22) (undo-tree-id4482 . -23) (undo-tree-id4483 . -23) (undo-tree-id4484 . -23) (undo-tree-id4485 . -23) (undo-tree-id4486 . -23) (undo-tree-id4487 . -23) (undo-tree-id4488 . -23) (undo-tree-id4489 . -23) (undo-tree-id4490 . -23) (undo-tree-id4491 . -23) (undo-tree-id4492 . -24) (undo-tree-id4493 . -23) (undo-tree-id4494 . -24) (undo-tree-id4495 . -24) (undo-tree-id4496 . -24) (undo-tree-id4497 . -24) (undo-tree-id4498 . -24) (undo-tree-id4499 . -24) (undo-tree-id4500 . -24) (undo-tree-id4501 . -24) (undo-tree-id4502 . -24) (undo-tree-id4503 . -24) (undo-tree-id4504 . -25) (undo-tree-id4505 . -24) (undo-tree-id4506 . -24) (undo-tree-id4507 . -24) (undo-tree-id4508 . -24) (undo-tree-id4509 . -24) (undo-tree-id4510 . -24) (undo-tree-id4511 . -24) (undo-tree-id4512 . -24) (undo-tree-id4513 . -24) (undo-tree-id4514 . -24) (undo-tree-id4515 . -24) (undo-tree-id4516 . -24) (undo-tree-id4517 . -24) (undo-tree-id4518 . -23) (undo-tree-id4519 . -24) (undo-tree-id4520 . -23) (undo-tree-id4521 . -23) (undo-tree-id4522 . -23) (undo-tree-id4523 . -23) (undo-tree-id4524 . -23) (undo-tree-id4525 . -23) (undo-tree-id4526 . -23) (undo-tree-id4527 . -23) (undo-tree-id4528 . -23) (undo-tree-id4529 . -23) (undo-tree-id4530 . -22) (undo-tree-id4531 . -23) (undo-tree-id4532 . -22) (undo-tree-id4533 . -22) (undo-tree-id4534 . -22) (undo-tree-id4535 . -22) (undo-tree-id4536 . -22) (undo-tree-id4537 . -21) (undo-tree-id4538 . -22) (undo-tree-id4539 . -21) (undo-tree-id4540 . -21) (undo-tree-id4541 . -21) (undo-tree-id4542 . -21) (undo-tree-id4543 . -21) (undo-tree-id4544 . -20) (undo-tree-id4545 . -21) (undo-tree-id4546 . -20) (undo-tree-id4547 . -20) (undo-tree-id4548 . -20) (undo-tree-id4549 . -20) (undo-tree-id4550 . -20) (undo-tree-id4551 . -19) (undo-tree-id4552 . -20) (undo-tree-id4553 . -19) (undo-tree-id4554 . -19) (undo-tree-id4555 . -19) (undo-tree-id4556 . -19) (undo-tree-id4557 . -19) (undo-tree-id4558 . -18) (undo-tree-id4559 . -19) (undo-tree-id4560 . -18) (undo-tree-id4561 . -18) (undo-tree-id4562 . -18) (undo-tree-id4563 . -18) (undo-tree-id4564 . -18) (undo-tree-id4565 . -17) (undo-tree-id4566 . -18) (undo-tree-id4567 . -17) (undo-tree-id4568 . -17) (undo-tree-id4569 . -17) (undo-tree-id4570 . -17) (undo-tree-id4571 . -17) (undo-tree-id4572 . -16) (undo-tree-id4573 . -17) (undo-tree-id4574 . -16) (undo-tree-id4575 . -16) (undo-tree-id4576 . -16) (undo-tree-id4577 . -16) (undo-tree-id4578 . -16) (undo-tree-id4579 . -15) (undo-tree-id4580 . -16) (undo-tree-id4581 . -15) (undo-tree-id4582 . -15) (undo-tree-id4583 . -15) (undo-tree-id4584 . -15) (undo-tree-id4585 . -15) (undo-tree-id4586 . -14) (undo-tree-id4587 . -15) (undo-tree-id4588 . -14) (undo-tree-id4589 . -14) (undo-tree-id4590 . -14) (undo-tree-id4591 . -14) (undo-tree-id4592 . -14) (undo-tree-id4593 . -13) (undo-tree-id4594 . -14) (undo-tree-id4595 . -13) (undo-tree-id4596 . -13) (undo-tree-id4597 . -13) (undo-tree-id4598 . -13) (undo-tree-id4599 . -13) (undo-tree-id4600 . -12) (undo-tree-id4601 . -13) (undo-tree-id4602 . -12) (undo-tree-id4603 . -12) (undo-tree-id4604 . -12) (undo-tree-id4605 . -12) (undo-tree-id4606 . -12) (undo-tree-id4607 . -11) (undo-tree-id4608 . -12) (undo-tree-id4609 . -11) (undo-tree-id4610 . -11) (undo-tree-id4611 . -11) (undo-tree-id4612 . -11) (undo-tree-id4613 . -11) (undo-tree-id4614 . -10) (undo-tree-id4615 . -11) (undo-tree-id4616 . -10) (undo-tree-id4617 . -10) (undo-tree-id4618 . -10) (undo-tree-id4619 . -10) (undo-tree-id4620 . -10) (undo-tree-id4621 . -9) (undo-tree-id4622 . -10) (undo-tree-id4623 . -9) (undo-tree-id4624 . -9) (undo-tree-id4625 . -9) (undo-tree-id4626 . -9) (undo-tree-id4627 . -9) (undo-tree-id4628 . -8) (undo-tree-id4629 . -9) (undo-tree-id4630 . -8) (undo-tree-id4631 . -8) (undo-tree-id4632 . -8) (undo-tree-id4633 . -8) (undo-tree-id4634 . -8) (undo-tree-id4635 . -7) (undo-tree-id4636 . -8) (undo-tree-id4637 . -7) (undo-tree-id4638 . -7) (undo-tree-id4639 . -7) (undo-tree-id4640 . -7) (undo-tree-id4641 . -7) (undo-tree-id4642 . -6) (undo-tree-id4643 . -7) (undo-tree-id4644 . -6) (undo-tree-id4645 . -6) (undo-tree-id4646 . -6) (undo-tree-id4647 . -6) (undo-tree-id4648 . -6) (undo-tree-id4649 . -5) (undo-tree-id4650 . -6) (undo-tree-id4651 . -5) (undo-tree-id4652 . -5) (undo-tree-id4653 . -5) (undo-tree-id4654 . -5) (undo-tree-id4655 . -5) (undo-tree-id4656 . -4) (undo-tree-id4657 . -5) (undo-tree-id4658 . -4) (undo-tree-id4659 . -4) (undo-tree-id4660 . -4) (undo-tree-id4661 . -4) (undo-tree-id4662 . -4) (undo-tree-id4663 . -3) (undo-tree-id4664 . -4) (undo-tree-id4665 . -3) (undo-tree-id4666 . -3) (undo-tree-id4667 . -3) (undo-tree-id4668 . -3) (undo-tree-id4669 . -3) (undo-tree-id4670 . -2) (undo-tree-id4671 . -3) (undo-tree-id4672 . -2) (undo-tree-id4673 . -2) (undo-tree-id4674 . -2) (undo-tree-id4675 . -2) (undo-tree-id4676 . -2) (undo-tree-id4677 . -1) (undo-tree-id4678 . -2) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1)) nil (25196 12087 819690 148000) 0 nil])
([nil nil ((3852 . 3855) (3851 . 3853) (#("(" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg fontified nil font-lock-fontified t font-lock-multiline t face org-quote)) . -3851) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (3851 . 3852)) nil (25196 12087 819210 544000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg delete)) . 4069) (4070 . 4070) 3854) nil (25196 12087 819197 28000) 0 nil])
([nil nil ((3834 . 3835) (t 25196 12087 841959 648000)) nil (25196 12266 692737 652000) 0 nil])
([nil nil ((3848 . 3856) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3839) (3838 . 3839) (3835 . 3848)) nil (25196 12266 692736 760000) 0 nil])
([nil nil ((3856 . 3861)) nil (25196 12266 692735 723000) 0 nil])
([nil nil ((3861 . 3867)) nil (25196 12266 692735 132000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3865) (undo-tree-id4788 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3866) (undo-tree-id4789 . -1) 3867) nil (25196 12266 692733 921000) 0 nil])
([nil nil ((3865 . 3886)) nil (25196 12266 692731 808000) 0 nil])
([nil nil ((3886 . 3897)) nil (25196 12266 692731 178000) 0 nil])
([nil nil ((3897 . 3916)) nil (25196 12266 692730 392000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3915) (undo-tree-id4787 . -1) 3916) nil (25196 12266 692729 462000) 0 nil])
([nil nil ((3915 . 3918)) nil (25196 12266 692727 864000) 0 nil])
([nil nil ((3926 . 3939) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 3918) (3917 . 3918) (3918 . 3926)) nil (25196 12266 692726 891000) 0 nil])
([nil nil ((3939 . 3960)) nil (25196 12266 692725 897000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3958) (undo-tree-id4785 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3959) (undo-tree-id4786 . -1) 3960) nil (25196 12266 692724 857000) 0 nil])
([nil nil ((3958 . 3959)) nil (25196 12266 692722 450000) 0 nil])
([nil nil ((3959 . 3964)) nil (25196 12266 692721 721000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -3963) (undo-tree-id4784 . -1) 3964) nil (25196 12266 692720 805000) 0 nil])
([nil nil ((3963 . 3975)) nil (25196 12266 692719 290000) 0 nil])
([nil nil ((3975 . 3976)) nil (25196 12266 692718 539000) 0 nil])
([nil nil ((3976 . 3977)) nil (25196 12266 692717 897000) 0 nil])
([nil nil ((3977 . 3998)) nil (25196 12266 692717 38000) 0 nil])
([nil nil ((3998 . 4007)) nil (25196 12266 692716 327000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4006) (undo-tree-id4783 . -1) 4007) nil (25196 12266 692715 350000) 0 nil])
([nil nil ((4006 . 4013)) nil (25196 12266 692713 234000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4012) (undo-tree-id4782 . -1) 4013) nil (25196 12266 692712 214000) 0 nil])
([nil nil ((4012 . 4028)) nil (25196 12266 692710 522000) 0 nil])
([nil nil ((4028 . 4047)) nil (25196 12266 692709 739000) 0 nil])
([nil nil ((4035 . 4036)) nil (25196 12266 692709 16000) 0 nil])
([nil nil ((4048 . 4051)) nil (25196 12266 692708 160000) 0 nil])
([nil nil ((4062 . 4072) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 4053) (4052 . 4053) (4051 . 4062)) nil (25196 12266 692707 130000) 0 nil])
([nil nil ((4072 . 4093)) nil (25196 12266 692705 986000) 0 nil])
([nil nil ((4093 . 4105)) nil (25196 12266 692705 148000) 0 nil])
([nil nil ((4093 . 4104) (#("aliviation" 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 4093) (undo-tree-id4779 . 2) (undo-tree-id4780 . -7) (undo-tree-id4781 . -7)) nil (25196 12266 692704 102000) 0 nil])
([nil nil ((4106 . 4107)) nil (25196 12266 692701 179000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4105) (undo-tree-id4777 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4106) (undo-tree-id4778 . -1) 4107) nil (25196 12266 692699 950000) 0 nil])
([nil nil ((4105 . 4108)) nil (25196 12266 692697 498000) 0 nil])
([nil nil ((4108 . 4115)) nil (25196 12266 692696 788000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4112) (undo-tree-id4774 . -1) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4113) (undo-tree-id4775 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4114) (undo-tree-id4776 . -1) 4115) nil (25196 12266 692695 518000) 0 nil])
([nil nil ((4112 . 4119)) nil (25196 12266 692692 155000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4117) (undo-tree-id4772 . -1) (#("f" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4118) (undo-tree-id4773 . -1) 4119) nil (25196 12266 692690 794000) 0 nil])
([nil nil ((4136 . 4138) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . 4132) (4131 . 4132) (4117 . 4136)) nil (25196 12266 692675 167000) 0 nil])
([nil nil ((4138 . 4140)) nil (25196 12266 692673 456000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4136) (undo-tree-id4768 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4137) (undo-tree-id4769 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4138) (undo-tree-id4770 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4139) (undo-tree-id4771 . -1) 4140) nil (25196 12266 692671 758000) 0 nil])
([nil nil ((4136 . 4142)) nil (25196 12266 692667 255000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4139) (undo-tree-id4765 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4140) (undo-tree-id4766 . -1) (#("." 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4141) (undo-tree-id4767 . -1) 4142) nil (25196 12266 692665 735000) 0 nil])
([nil nil ((4139 . 4140)) nil (25196 12266 692662 341000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4136) (undo-tree-id4761 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4137) (undo-tree-id4762 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4138) (undo-tree-id4763 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4139) (undo-tree-id4764 . -1) 4140) nil (25196 12266 692660 652000) 0 nil])
([nil nil ((4136 . 4144)) nil (25196 12266 692655 967000) 0 nil])
([nil nil ((4378 . 4380)) nil (25196 12266 692654 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4379) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) 4380) nil (25196 12266 692653 222000) 0 nil])
([nil nil ((4379 . 4380)) nil (25196 12266 692643 673000) 0 nil])
([nil nil ((4380 . 4381)) nil (25196 12266 692642 298000) 0 nil])
([nil nil ((4381 . 4503)) nil (25196 12266 692637 602000) 0 nil])
([nil nil ((4144 . 4146) (t 25196 12266 721969 681000)) nil (25196 12332 408878 695000) 0 nil])
([nil nil ((4146 . 4148)) nil (25196 12332 408877 987000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4144) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4145) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (#("T" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4146) (undo-tree-id4860 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t ws-butler-chg chg)) . -4147) (undo-tree-id4861 . -1) 4148) nil (25196 12332 408876 548000) 0 nil])
([nil nil ((4504 . 4507)) nil (25196 12332 408871 52000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) ws-butler-chg chg)) . -4505) (undo-tree-id4851 . -2) (undo-tree-id4852 . -2) (undo-tree-id4853 . -2) 4507) nil (25196 12332 408870 166000) 0 nil])
([nil nil ((4505 . 4522)) nil (25196 12332 408867 336000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4521) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) 4522) nil (25196 12332 408866 1000) 0 nil])
([nil nil ((4521 . 4542)) nil (25196 12332 408863 820000) 0 nil])
([nil nil ((4542 . 4545)) nil (25196 12332 408863 160000) 0 nil])
([nil nil ((4545 . 4566)) nil (25196 12332 408862 477000) 0 nil])
([nil nil ((4566 . 4582)) nil (25196 12332 408861 841000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4581) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) 4582) nil (25196 12332 408860 997000) 0 nil])
([nil nil ((4581 . 4584)) nil (25196 12332 408858 795000) 0 nil])
([nil nil ((#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4581) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4582) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4583) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) 4584) nil (25196 12332 408857 499000) 0 nil])
([nil nil ((4587 . 4588) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) ws-butler-chg chg)) . 4585) (4584 . 4585) (4581 . 4587)) nil (25196 12332 408850 843000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4587) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) 4588) nil (25196 12332 408849 561000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4608) (undo-tree-id4838 . -1) (4587 . 4609)) nil (25196 12332 408847 346000) 0 nil])
([nil nil ((4608 . 4610)) nil (25196 12332 408845 941000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4608) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4609) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) 4610) nil (25196 12332 408844 747000) 0 nil])
([nil nil ((4608 . 4623)) nil (25196 12332 408841 363000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4602) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (#("v" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4603) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4604) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4605) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4606) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4607) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4608) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4609) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4610) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4611) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4612) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4613) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4614) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4615) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4616) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4617) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4618) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4619) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4620) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4621) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4622) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) 4623) nil (25196 12332 408836 673000) 0 nil])
([nil nil ((4602 . 4612)) nil (25196 12332 408807 895000) 0 nil])
([nil nil ((4612 . 4627)) nil (25196 12332 408807 238000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) ws-butler-chg chg)) . -4626) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) 4627) nil (25196 12332 408805 892000) 0 nil])
([nil nil ((4626 . 4641)) nil (25196 12332 408798 891000) 0 nil])
([nil nil ((4636 . 4644)) nil (25196 12332 408798 141000) 0 nil])
([nil nil ((4648 . 4659)) nil (25196 12332 408796 921000) 0 nil])
([nil nil ((4660 . 4661) 4658) nil (25196 12332 408792 611000) 0 nil])
([nil nil ((4649 . 4660) (#("aliviation" 0 10 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 4649) (undo-tree-id4862 . -9) (undo-tree-id4863 . -9) (undo-tree-id4864 . -9) (undo-tree-id4865 . -9) (undo-tree-id4866 . -9) (undo-tree-id4867 . -9) (undo-tree-id4868 . -9) (undo-tree-id4869 . -9) (undo-tree-id4870 . -9) (t 25196 12332 438640 32000)) nil (25196 12336 151693 762000) 0 nil])
([nil current ((4381 . 4502) (#("[[ https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/][Exploring the limits of air cooling]]" 0 84 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t face org-link) 84 85 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 85 119 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t) 119 120 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 120 121 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t) 121 122 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK:  https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/" htmlize-link (:uri " https://www.electronics-cooling.com/2006/08/exploring-the-limits-of-air-cooling/") font-lock-multiline t)) . 4381) (undo-tree-id4871 . -120) (undo-tree-id4872 . -120) (t 25196 12336 188640 242000)) nil (25196 12563 163385 480000) 0 nil])
nil
